#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)
#loc1 = loc(unknown)
#loc59 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:46)
#loc72 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":162:29)
#loc96 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:50)
#loc105 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":200:33)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#loc155 = loc(callsite(#loc1 at #loc59))
#loc157 = loc(callsite(#loc1 at #loc72))
#loc159 = loc(callsite(#loc1 at #loc96))
#loc161 = loc(callsite(#loc1 at #loc105))
module attributes {tlx.has_explicit_local_mem_access = true, tlx.has_tlx_ops = true, tlx.has_warp_spec_ops = true, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_attn_fwd_ws_pipelined_pingpong(%arg0: f32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg2: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg4: !tt.tensordesc<tensor<64x128xf16, #shared>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg5: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg6: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg7: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg8: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg9: !tt.tensordesc<tensor<128x128xf16, #shared>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg10: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg11: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg12: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg13: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg14: !tt.tensordesc<tensor<128x128xf16, #shared>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg15: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg16: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg17: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg18: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg19: !tt.tensordesc<tensor<64x128xf16, #shared>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg20: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg21: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg22: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg23: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg24: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = ttg.local_alloc : () -> !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(#loc2)
    %1 = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc3)
    %2 = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc4)
    %3 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc5)
    %4 = ttg.memdesc_subview %3[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    ttng.init_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    %5 = ttg.memdesc_subview %3[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    ttng.init_barrier %5, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    %6 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc6)
    %7 = ttg.memdesc_subview %6[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    ttng.init_barrier %7, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    %8 = ttg.memdesc_subview %6[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    ttng.init_barrier %8, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    %9 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc7)
    %10 = ttg.memdesc_subview %9[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    ttng.init_barrier %10, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    %11 = ttg.memdesc_subview %9[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    ttng.init_barrier %11, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    %12 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc8)
    %13 = ttg.memdesc_subview %12[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    ttng.init_barrier %13, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    %14 = ttg.memdesc_subview %12[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    ttng.init_barrier %14, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    %15 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc9)
    %16 = ttg.memdesc_subview %15[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttng.init_barrier %16, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    %17 = ttg.memdesc_subview %15[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttng.init_barrier %17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttg.warp_specialize(%arg3, %arg1, %arg24, %arg19, %6, %9, %1, %3, %0, %arg0, %12, %15, %2) attributes {requestedRegisters = array<i32: 232, 232>}
    default {
      %18 = tt.get_program_id x : i32 loc(#loc11)
      %19 = tt.get_program_id y : i32 loc(#loc12)
      %20 = arith.divsi %19, %arg3 : i32 loc(#loc13)
      %21 = arith.remsi %19, %arg3 : i32 loc(#loc14)
      %22 = arith.muli %arg24, %arg3 : i32 loc(#loc15)
      %23 = arith.muli %20, %22 : i32 loc(#loc16)
      %24 = arith.muli %21, %arg24 : i32 loc(#loc17)
      %25 = arith.addi %23, %24 : i32 loc(#loc18)
      %26 = arith.muli %18, %c128_i32 : i32 loc(#loc19)
      %27 = arith.addi %25, %26 : i32 loc(#loc20)
      ttng.barrier_expect %4, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc21)
      %28 = ttg.memdesc_subview %0[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc22)
      %29 = ttng.tensor_desc_to_tma_ptr %arg4 : !tt.tensordesc<tensor<64x128xf16, #shared>> to !tt.ptr<i8> loc(#loc23)
      ttng.async_tma_copy_global_to_local %29[%27, %c0_i32] %28, %4, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc23)
      ttng.barrier_expect %5, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc21)
      %30 = arith.addi %27, %c64_i32 : i32 loc(#loc24)
      %31 = ttg.memdesc_subview %0[%c1_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc22)
      ttng.async_tma_copy_global_to_local %29[%30, %c0_i32] %31, %5, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc23)
      %32 = ttng.tensor_desc_to_tma_ptr %arg9 : !tt.tensordesc<tensor<128x128xf16, #shared>> to !tt.ptr<i8> loc(#loc25)
      %33 = ttng.tensor_desc_to_tma_ptr %arg14 : !tt.tensordesc<tensor<128x128xf16, #shared>> to !tt.ptr<i8> loc(#loc26)
      %34:3 = scf.for %arg25 = %c0_i32 to %arg24 step %c128_i32 iter_args(%arg26 = %c0_i32, %arg27 = %25, %arg28 = %c0_i32) -> (i32, i32, i32)  : i32 {
        %35 = arith.remsi %arg28, %c2_i32 : i32 loc(#loc28)
        %36 = arith.cmpi eq, %35, %c0_i32 : i32 loc(#loc29)
        %37 = arith.extui %36 : i1 to i32 loc(#loc30)
        %38 = arith.xori %arg26, %37 : i32 loc(#loc30)
        %39 = ttg.memdesc_subview %6[%35] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc31)
        ttng.wait_barrier %39, %38, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc32)
        %40 = ttg.memdesc_subview %9[%35] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc33)
        ttng.barrier_expect %40, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc34)
        %41 = ttg.memdesc_subview %1[%35, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc35)
        ttng.async_tma_copy_global_to_local %32[%arg27, %c0_i32] %41, %40, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc25)
        %42 = ttg.memdesc_subview %12[%35] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc36)
        ttng.wait_barrier %42, %38, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc37)
        %43 = ttg.memdesc_subview %15[%35] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc38)
        ttng.barrier_expect %43, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc39)
        %44 = ttg.memdesc_subview %2[%35, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc40)
        ttng.async_tma_copy_global_to_local %33[%arg27, %c0_i32] %44, %43, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc26)
        %45 = arith.addi %arg27, %c128_i32 : i32 loc(#loc41)
        %46 = arith.addi %arg28, %c1_i32 : i32 loc(#loc42)
        scf.yield %38, %45, %46 : i32, i32, i32 loc(#loc43)
      } loc(#loc27)
      ttg.warp_yield loc(#loc1)
    }
    partition0(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16, #shared>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc1)
      %cst_0 = arith.constant 1.44269502 : f32 loc(#loc1)
      %c0_i32_1 = arith.constant 0 : i32 loc(#loc1)
      %true_2 = arith.constant true loc(#loc1)
      %c1_i32_3 = arith.constant 1 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc1)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc1)
      %c128_i32_4 = arith.constant 128 : i32 loc(#loc1)
      %c2_i32_5 = arith.constant 2 : i32 loc(#loc1)
      %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x1xf32, #mma> loc(#loc1)
      %cst_7 = arith.constant dense<0xFF800000> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
      %18 = arith.mulf %arg34, %cst_0 : f32 loc(#loc44)
      %19 = ttg.memdesc_subview %arg32[%c0_i32_1] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc45)
      ttng.wait_barrier %19, %c0_i32_1, %true_2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc46)
      %20 = ttg.memdesc_subview %arg30[%c0_i32_1] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc47)
      ttng.wait_barrier %20, %c0_i32_1, %true_2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc48)
      %21 = ttg.memdesc_subview %arg31[%c0_i32_1, %c0_i32_1, %c0_i32_1] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc49)
      %22 = ttg.memdesc_trans %21 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc50)
      ttng.wait_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc51)
      %23 = ttg.memdesc_subview %arg33[%c0_i32_1, %c0_i32_1, %c0_i32_1] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc52)
      %24 = ttng.warp_group_dot %23, %22, %cst {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc53)
      ttng.arrive_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc54)
      %25 = ttng.warp_group_dot_wait %24 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc55)
      %26 = ttg.memdesc_subview %arg29[%c0_i32_1] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc56)
      ttng.arrive_barrier %26, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc57)
      %27 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc59)), %arg39: f32 loc(callsite(#loc1 at #loc59))):
        %83 = arith.maxnumf %arg38, %arg39 : f32 loc(#loc162)
        tt.reduce.return %83 : f32 loc(#loc154)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc154)
      %28 = tt.splat %18 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc61)
      %29 = arith.mulf %27, %28 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc61)
      %30 = arith.maxnumf %29, %cst_7 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc62)
      %31 = tt.splat %18 : f32 -> tensor<64x128xf32, #mma> loc(#loc63)
      %32 = arith.mulf %25, %31 : tensor<64x128xf32, #mma> loc(#loc63)
      %33 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc64)
      %34 = tt.broadcast %33 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc65)
      %35 = arith.subf %32, %34 : tensor<64x128xf32, #mma> loc(#loc65)
      %36 = math.exp2 %35 : tensor<64x128xf32, #mma> loc(#loc66)
      %37 = arith.subf %cst_7, %30 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc67)
      %38 = math.exp2 %37 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc68)
      %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc69)
      %40 = arith.mulf %39, %cst_6 : tensor<64x1xf32, #mma> loc(#loc70)
      %41 = tt.broadcast %40 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc70)
      %42 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc72)), %arg39: f32 loc(callsite(#loc1 at #loc72))):
        %83 = arith.addf %arg38, %arg39 : f32 loc(#loc163)
        tt.reduce.return %83 : f32 loc(#loc156)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc156)
      %43 = arith.addf %38, %42 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc74)
      %44:7 = scf.for %arg38 = %c128_i32_4 to %arg27 step %c128_i32_4 iter_args(%arg39 = %c0_i32_1, %arg40 = %c1_i32_3, %arg41 = %36, %arg42 = %41, %arg43 = %43, %arg44 = %30, %arg45 = %c1_i32_3) -> (i32, i32, tensor<64x128xf32, #mma>, tensor<64x128xf32, #mma>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i32)  : i32 {
        %83 = arith.remsi %arg45, %c2_i32_5 : i32 loc(#loc76)
        %84 = arith.cmpi eq, %83, %c0_i32_1 : i32 loc(#loc77)
        %85 = arith.extui %84 : i1 to i32 loc(#loc78)
        %86 = arith.xori %arg39, %85 : i32 loc(#loc78)
        %87 = ttg.memdesc_subview %arg30[%83] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc79)
        ttng.wait_barrier %87, %86, %true_2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc80)
        %88 = ttg.memdesc_subview %arg31[%83, %c0_i32_1, %c0_i32_1] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc81)
        %89 = ttg.memdesc_trans %88 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc82)
        %90 = ttng.warp_group_dot %23, %89, %cst {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc83)
        %91 = arith.subi %arg45, %c1_i32_3 : i32 loc(#loc84)
        %92 = arith.remsi %91, %c2_i32_5 : i32 loc(#loc85)
        %93 = arith.cmpi eq, %92, %c0_i32_1 : i32 loc(#loc86)
        %94 = arith.extui %93 : i1 to i32 loc(#loc87)
        %95 = arith.xori %arg40, %94 : i32 loc(#loc87)
        %96 = ttg.memdesc_subview %arg36[%92] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc88)
        ttng.wait_barrier %96, %95, %true_2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc89)
        %97 = arith.truncf %arg41 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc90)
        %98 = ttg.memdesc_subview %arg37[%92, %c0_i32_1, %c0_i32_1] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc91)
        %99 = ttg.convert_layout %97 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc92)
        %100 = ttng.warp_group_dot %99, %98, %arg42 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc92)
        %101 = ttng.warp_group_dot_wait %90 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc93)
        %102 = ttg.memdesc_subview %arg29[%83] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc94)
        ttng.arrive_barrier %102, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc95)
        %103 = "tt.reduce"(%101) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc96)), %arg47: f32 loc(callsite(#loc1 at #loc96))):
          %122 = arith.maxnumf %arg46, %arg47 : f32 loc(#loc164)
          tt.reduce.return %122 : f32 loc(#loc158)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc158)
        %104 = arith.mulf %103, %28 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc97)
        %105 = arith.maxnumf %arg44, %104 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc98)
        %106 = arith.mulf %101, %31 : tensor<64x128xf32, #mma> loc(#loc99)
        %107 = tt.expand_dims %105 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc100)
        %108 = tt.broadcast %107 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc101)
        %109 = arith.subf %106, %108 : tensor<64x128xf32, #mma> loc(#loc101)
        %110 = math.exp2 %109 : tensor<64x128xf32, #mma> loc(#loc102)
        %111 = arith.subf %arg44, %105 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc103)
        %112 = math.exp2 %111 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc104)
        %113 = "tt.reduce"(%110) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc105)), %arg47: f32 loc(callsite(#loc1 at #loc105))):
          %122 = arith.addf %arg46, %arg47 : f32 loc(#loc165)
          tt.reduce.return %122 : f32 loc(#loc160)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc160)
        %114 = arith.mulf %arg43, %112 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc106)
        %115 = arith.addf %114, %113 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc107)
        %116 = ttng.warp_group_dot_wait %100 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc108)
        %117 = ttg.memdesc_subview %arg35[%92] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc109)
        ttng.arrive_barrier %117, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc110)
        %118 = tt.expand_dims %112 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc111)
        %119 = tt.broadcast %118 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc112)
        %120 = arith.mulf %116, %119 : tensor<64x128xf32, #mma> loc(#loc112)
        %121 = arith.addi %arg45, %c1_i32_3 : i32 loc(#loc113)
        scf.yield %86, %95, %110, %120, %115, %105, %121 : i32, i32, tensor<64x128xf32, #mma>, tensor<64x128xf32, #mma>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i32 loc(#loc114)
      } loc(#loc75)
      %45 = arith.subi %44#6, %c1_i32_3 : i32 loc(#loc115)
      %46 = arith.remsi %45, %c2_i32_5 : i32 loc(#loc116)
      %47 = arith.cmpi eq, %46, %c0_i32_1 : i32 loc(#loc117)
      %48 = arith.extui %47 : i1 to i32 loc(#loc118)
      %49 = arith.xori %44#1, %48 : i32 loc(#loc118)
      %50 = ttg.memdesc_subview %arg36[%46] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc119)
      ttng.wait_barrier %50, %49, %true_2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc120)
      %51 = arith.truncf %44#2 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc121)
      %52 = ttg.memdesc_subview %arg37[%46, %c0_i32_1, %c0_i32_1] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc122)
      %53 = ttg.convert_layout %51 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc123)
      %54 = ttng.warp_group_dot %53, %52, %44#3 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc123)
      %55 = ttng.warp_group_dot_wait %54 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc124)
      %56 = ttg.memdesc_subview %arg35[%46] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc125)
      ttng.arrive_barrier %56, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc126)
      %57 = tt.get_program_id x : i32 loc(#loc127)
      %58 = tt.get_program_id y : i32 loc(#loc128)
      %59 = arith.divsi %58, %arg25 : i32 loc(#loc129)
      %60 = arith.remsi %58, %arg25 : i32 loc(#loc130)
      %61 = arith.muli %arg27, %arg25 : i32 loc(#loc131)
      %62 = arith.muli %59, %61 : i32 loc(#loc132)
      %63 = arith.muli %60, %arg27 : i32 loc(#loc133)
      %64 = arith.addi %62, %63 : i32 loc(#loc134)
      %65 = arith.muli %57, %c128_i32_4 : i32 loc(#loc135)
      %66 = arith.addi %64, %65 : i32 loc(#loc136)
      %67 = math.log2 %44#4 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc137)
      %68 = arith.addf %44#5, %67 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc138)
      %69 = tt.expand_dims %44#4 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc139)
      %70 = tt.broadcast %69 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc140)
      %71 = arith.divf %55, %70 : tensor<64x128xf32, #mma> loc(#loc140)
      %72 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc141)
      %73 = tt.splat %65 : i32 -> tensor<64xi32, #blocked> loc(#loc142)
      %74 = arith.addi %73, %72 : tensor<64xi32, #blocked> loc(#loc142)
      %75 = arith.muli %58, %arg27 : i32 loc(#loc143)
      %76 = tt.addptr %arg26, %75 : !tt.ptr<f32>, i32 loc(#loc144)
      %77 = tt.splat %76 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc145)
      %78 = tt.addptr %77, %74 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc145)
      %79 = ttg.convert_layout %68 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked> loc(#loc146)
      tt.store %78, %79 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc146)
      %80 = arith.truncf %71 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc147)
      %81 = ttg.local_alloc %80 : (tensor<64x128xf16, #mma>) -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc148)
      ttng.fence_async_shared {bCluster = false} loc(#loc148)
      %82 = ttng.tensor_desc_to_tma_ptr %arg28 : !tt.tensordesc<tensor<64x128xf16, #shared>> to !tt.ptr<i8> loc(#loc148)
      ttng.async_tma_copy_local_to_global %82[%66, %c0_i32_1] %81 : !tt.ptr<i8>, !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc148)
      ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc148)
      ttg.warp_return loc(#loc1)
    }
    partition1(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16, #shared>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc1)
      %cst_0 = arith.constant 1.44269502 : f32 loc(#loc1)
      %c1_i32_1 = arith.constant 1 : i32 loc(#loc1)
      %c0_i32_2 = arith.constant 0 : i32 loc(#loc1)
      %true_3 = arith.constant true loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc1)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc1)
      %c128_i32_4 = arith.constant 128 : i32 loc(#loc1)
      %c2_i32_5 = arith.constant 2 : i32 loc(#loc1)
      %c64_i32_6 = arith.constant 64 : i32 loc(#loc1)
      %cst_7 = arith.constant dense<0.000000e+00> : tensor<64x1xf32, #mma> loc(#loc1)
      %cst_8 = arith.constant dense<0xFF800000> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
      %18 = arith.mulf %arg34, %cst_0 : f32 loc(#loc44)
      %19 = ttg.memdesc_subview %arg32[%c1_i32_1] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc45)
      ttng.wait_barrier %19, %c0_i32_2, %true_3 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc46)
      %20 = ttg.memdesc_subview %arg30[%c0_i32_2] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc47)
      ttng.wait_barrier %20, %c0_i32_2, %true_3 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc48)
      %21 = ttg.memdesc_subview %arg31[%c0_i32_2, %c0_i32_2, %c0_i32_2] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc49)
      %22 = ttg.memdesc_trans %21 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc50)
      ttng.arrive_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc149)
      ttng.wait_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc150)
      %23 = ttg.memdesc_subview %arg33[%c1_i32_1, %c0_i32_2, %c0_i32_2] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc52)
      %24 = ttng.warp_group_dot %23, %22, %cst {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc53)
      %25 = ttng.warp_group_dot_wait %24 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc55)
      %26 = ttg.memdesc_subview %arg29[%c0_i32_2] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc56)
      ttng.arrive_barrier %26, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc57)
      %27 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc59)), %arg39: f32 loc(callsite(#loc1 at #loc59))):
        %85 = arith.maxnumf %arg38, %arg39 : f32 loc(#loc162)
        tt.reduce.return %85 : f32 loc(#loc154)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc154)
      %28 = tt.splat %18 : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc61)
      %29 = arith.mulf %27, %28 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc61)
      %30 = arith.maxnumf %29, %cst_8 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc62)
      %31 = tt.splat %18 : f32 -> tensor<64x128xf32, #mma> loc(#loc63)
      %32 = arith.mulf %25, %31 : tensor<64x128xf32, #mma> loc(#loc63)
      %33 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc64)
      %34 = tt.broadcast %33 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc65)
      %35 = arith.subf %32, %34 : tensor<64x128xf32, #mma> loc(#loc65)
      %36 = math.exp2 %35 : tensor<64x128xf32, #mma> loc(#loc66)
      %37 = arith.subf %cst_8, %30 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc67)
      %38 = math.exp2 %37 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc68)
      %39 = tt.expand_dims %38 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc69)
      %40 = arith.mulf %39, %cst_7 : tensor<64x1xf32, #mma> loc(#loc70)
      %41 = tt.broadcast %40 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc70)
      %42 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc72)), %arg39: f32 loc(callsite(#loc1 at #loc72))):
        %85 = arith.addf %arg38, %arg39 : f32 loc(#loc163)
        tt.reduce.return %85 : f32 loc(#loc156)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc156)
      %43 = arith.addf %38, %42 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc74)
      %44:7 = scf.for %arg38 = %c128_i32_4 to %arg27 step %c128_i32_4 iter_args(%arg39 = %c0_i32_2, %arg40 = %c1_i32_1, %arg41 = %36, %arg42 = %41, %arg43 = %43, %arg44 = %30, %arg45 = %c1_i32_1) -> (i32, i32, tensor<64x128xf32, #mma>, tensor<64x128xf32, #mma>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i32)  : i32 {
        %85 = arith.remsi %arg45, %c2_i32_5 : i32 loc(#loc76)
        %86 = arith.cmpi eq, %85, %c0_i32_2 : i32 loc(#loc77)
        %87 = arith.extui %86 : i1 to i32 loc(#loc78)
        %88 = arith.xori %arg39, %87 : i32 loc(#loc78)
        %89 = ttg.memdesc_subview %arg30[%85] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc79)
        ttng.wait_barrier %89, %88, %true_3 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc80)
        %90 = ttg.memdesc_subview %arg31[%85, %c0_i32_2, %c0_i32_2] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc81)
        %91 = ttg.memdesc_trans %90 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc82)
        %92 = ttng.warp_group_dot %23, %91, %cst {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc83)
        %93 = arith.subi %arg45, %c1_i32_1 : i32 loc(#loc84)
        %94 = arith.remsi %93, %c2_i32_5 : i32 loc(#loc85)
        %95 = arith.cmpi eq, %94, %c0_i32_2 : i32 loc(#loc86)
        %96 = arith.extui %95 : i1 to i32 loc(#loc87)
        %97 = arith.xori %arg40, %96 : i32 loc(#loc87)
        %98 = ttg.memdesc_subview %arg36[%94] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc88)
        ttng.wait_barrier %98, %97, %true_3 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc89)
        %99 = arith.truncf %arg41 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc90)
        %100 = ttg.memdesc_subview %arg37[%94, %c0_i32_2, %c0_i32_2] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc91)
        %101 = ttg.convert_layout %99 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc92)
        %102 = ttng.warp_group_dot %101, %100, %arg42 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc92)
        %103 = ttng.warp_group_dot_wait %92 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc93)
        %104 = ttg.memdesc_subview %arg29[%85] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc94)
        ttng.arrive_barrier %104, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc95)
        %105 = "tt.reduce"(%103) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc96)), %arg47: f32 loc(callsite(#loc1 at #loc96))):
          %124 = arith.maxnumf %arg46, %arg47 : f32 loc(#loc164)
          tt.reduce.return %124 : f32 loc(#loc158)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc158)
        %106 = arith.mulf %105, %28 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc97)
        %107 = arith.maxnumf %arg44, %106 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc98)
        %108 = arith.mulf %103, %31 : tensor<64x128xf32, #mma> loc(#loc99)
        %109 = tt.expand_dims %107 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc100)
        %110 = tt.broadcast %109 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc101)
        %111 = arith.subf %108, %110 : tensor<64x128xf32, #mma> loc(#loc101)
        %112 = math.exp2 %111 : tensor<64x128xf32, #mma> loc(#loc102)
        %113 = arith.subf %arg44, %107 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc103)
        %114 = math.exp2 %113 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc104)
        %115 = "tt.reduce"(%112) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc105)), %arg47: f32 loc(callsite(#loc1 at #loc105))):
          %124 = arith.addf %arg46, %arg47 : f32 loc(#loc165)
          tt.reduce.return %124 : f32 loc(#loc160)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc160)
        %116 = arith.mulf %arg43, %114 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc106)
        %117 = arith.addf %116, %115 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc107)
        %118 = ttng.warp_group_dot_wait %102 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc108)
        %119 = ttg.memdesc_subview %arg35[%94] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc109)
        ttng.arrive_barrier %119, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc110)
        %120 = tt.expand_dims %114 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc111)
        %121 = tt.broadcast %120 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc112)
        %122 = arith.mulf %118, %121 : tensor<64x128xf32, #mma> loc(#loc112)
        %123 = arith.addi %arg45, %c1_i32_1 : i32 loc(#loc113)
        scf.yield %88, %97, %112, %122, %117, %107, %123 : i32, i32, tensor<64x128xf32, #mma>, tensor<64x128xf32, #mma>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i32 loc(#loc114)
      } loc(#loc75)
      %45 = arith.subi %44#6, %c1_i32_1 : i32 loc(#loc115)
      %46 = arith.remsi %45, %c2_i32_5 : i32 loc(#loc116)
      %47 = arith.cmpi eq, %46, %c0_i32_2 : i32 loc(#loc117)
      %48 = arith.extui %47 : i1 to i32 loc(#loc118)
      %49 = arith.xori %44#1, %48 : i32 loc(#loc118)
      %50 = ttg.memdesc_subview %arg36[%46] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc119)
      ttng.wait_barrier %50, %49, %true_3 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc120)
      %51 = arith.truncf %44#2 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc121)
      %52 = ttg.memdesc_subview %arg37[%46, %c0_i32_2, %c0_i32_2] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc122)
      %53 = ttg.convert_layout %51 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc123)
      %54 = ttng.warp_group_dot %53, %52, %44#3 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc123)
      %55 = ttng.warp_group_dot_wait %54 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc124)
      %56 = ttg.memdesc_subview %arg35[%46] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc125)
      ttng.arrive_barrier %56, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc126)
      %57 = tt.get_program_id x : i32 loc(#loc127)
      %58 = tt.get_program_id y : i32 loc(#loc128)
      %59 = arith.divsi %58, %arg25 : i32 loc(#loc129)
      %60 = arith.remsi %58, %arg25 : i32 loc(#loc130)
      %61 = arith.muli %arg27, %arg25 : i32 loc(#loc131)
      %62 = arith.muli %59, %61 : i32 loc(#loc132)
      %63 = arith.muli %60, %arg27 : i32 loc(#loc133)
      %64 = arith.addi %62, %63 : i32 loc(#loc134)
      %65 = arith.muli %57, %c128_i32_4 : i32 loc(#loc135)
      %66 = arith.addi %64, %65 : i32 loc(#loc136)
      %67 = arith.addi %66, %c64_i32_6 : i32 loc(#loc151)
      %68 = math.log2 %44#4 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc137)
      %69 = arith.addf %44#5, %68 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc138)
      %70 = tt.expand_dims %44#4 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc139)
      %71 = tt.broadcast %70 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc140)
      %72 = arith.divf %55, %71 : tensor<64x128xf32, #mma> loc(#loc140)
      %73 = arith.addi %65, %c64_i32_6 : i32 loc(#loc152)
      %74 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc141)
      %75 = tt.splat %73 : i32 -> tensor<64xi32, #blocked> loc(#loc142)
      %76 = arith.addi %75, %74 : tensor<64xi32, #blocked> loc(#loc142)
      %77 = arith.muli %58, %arg27 : i32 loc(#loc143)
      %78 = tt.addptr %arg26, %77 : !tt.ptr<f32>, i32 loc(#loc144)
      %79 = tt.splat %78 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc145)
      %80 = tt.addptr %79, %76 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc145)
      %81 = ttg.convert_layout %69 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked> loc(#loc146)
      tt.store %80, %81 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc146)
      %82 = arith.truncf %72 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc147)
      %83 = ttg.local_alloc %82 : (tensor<64x128xf16, #mma>) -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc148)
      ttng.fence_async_shared {bCluster = false} loc(#loc148)
      %84 = ttng.tensor_desc_to_tma_ptr %arg28 : !tt.tensordesc<tensor<64x128xf16, #shared>> to !tt.ptr<i8> loc(#loc148)
      ttng.async_tma_copy_local_to_global %84[%67, %c0_i32_2] %83 : !tt.ptr<i8>, !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc148)
      ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc148)
      ttg.warp_return loc(#loc1)
    } : (i32, !tt.ptr<f32>, i32, !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable>, f32, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>) -> () loc(#loc10)
    tt.return loc(#loc153)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":54:79)
#loc3 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":55:73)
#loc4 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":56:73)
#loc5 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":59:62)
#loc6 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":60:61)
#loc7 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":61:59)
#loc8 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":62:61)
#loc9 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":63:59)
#loc10 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:9)
#loc11 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":69:36)
#loc12 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":70:35)
#loc13 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":71:30)
#loc14 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":72:29)
#loc15 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:40)
#loc16 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:32)
#loc17 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:53)
#loc18 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:45)
#loc19 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:47)
#loc20 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:37)
#loc21 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:55)
#loc22 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:58)
#loc23 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:88)
#loc24 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:50)
#loc25 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:85)
#loc26 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:85)
#loc27 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":87:38)
#loc28 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":88:35)
#loc29 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:49)
#loc30 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:39)
#loc31 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:43)
#loc32 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:52)
#loc33 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:49)
#loc34 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:58)
#loc35 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:58)
#loc36 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:43)
#loc37 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:52)
#loc38 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:49)
#loc39 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:58)
#loc40 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:58)
#loc41 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":104:31)
#loc42 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:27)
#loc43 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:16)
#loc44 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":116:24)
#loc45 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:37)
#loc46 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:43)
#loc47 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:37)
#loc48 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:48)
#loc49 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:45)
#loc50 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:37)
#loc51 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":136:42)
#loc52 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:39)
#loc53 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:45)
#loc54 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":147:45)
#loc55 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":150:39)
#loc56 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:41)
#loc57 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:52)
#loc58 = loc("/root/triton/python/triton/language/standard.py":188:40)
#loc60 = loc("/root/triton/python/triton/language/standard.py":167:27)
#loc61 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:51)
#loc62 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:35)
#loc63 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:22)
#loc64 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:38)
#loc65 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:33)
#loc66 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":157:29)
#loc67 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:39)
#loc68 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:33)
#loc69 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:30)
#loc70 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:24)
#loc71 = loc("/root/triton/python/triton/language/standard.py":290:36)
#loc73 = loc("/root/triton/python/triton/language/standard.py":260:15)
#loc74 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":163:32)
#loc75 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":168:48)
#loc76 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":169:37)
#loc77 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:49)
#loc78 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:37)
#loc79 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:41)
#loc80 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:52)
#loc81 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:49)
#loc82 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:41)
#loc83 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":178:49)
#loc84 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:38)
#loc85 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:43)
#loc86 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:49)
#loc87 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:37)
#loc88 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:41)
#loc89 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:52)
#loc90 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":186:25)
#loc91 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:47)
#loc92 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:58)
#loc93 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":190:43)
#loc94 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:45)
#loc95 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:56)
#loc97 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:55)
#loc98 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:39)
#loc99 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:26)
#loc100 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:42)
#loc101 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:37)
#loc102 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":197:33)
#loc103 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:43)
#loc104 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:37)
#loc106 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:28)
#loc107 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:36)
#loc108 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":207:44)
#loc109 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:45)
#loc110 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:56)
#loc111 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:34)
#loc112 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:28)
#loc113 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:27)
#loc114 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:16)
#loc115 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:34)
#loc116 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:39)
#loc117 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:45)
#loc118 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:33)
#loc119 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:37)
#loc120 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:48)
#loc121 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":219:21)
#loc122 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:43)
#loc123 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:54)
#loc124 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":222:40)
#loc125 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:41)
#loc126 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:52)
#loc127 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":227:36)
#loc128 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":228:35)
#loc129 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":229:30)
#loc130 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":230:29)
#loc131 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:40)
#loc132 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:32)
#loc133 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:53)
#loc134 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:45)
#loc135 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:47)
#loc136 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:37)
#loc137 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:32)
#loc138 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:19)
#loc139 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:28)
#loc140 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:24)
#loc141 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:76)
#loc142 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:63)
#loc143 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:34)
#loc144 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:25)
#loc145 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:42)
#loc146 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":238:29)
#loc147 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:56)
#loc148 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:49)
#loc149 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":139:44)
#loc150 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":141:43)
#loc151 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":233:46)
#loc152 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:41)
#loc153 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:4)
#loc154 = loc(callsite(#loc58 at #loc59))
#loc156 = loc(callsite(#loc71 at #loc72))
#loc158 = loc(callsite(#loc58 at #loc96))
#loc160 = loc(callsite(#loc71 at #loc105))
#loc162 = loc(callsite(#loc60 at #loc154))
#loc163 = loc(callsite(#loc73 at #loc156))
#loc164 = loc(callsite(#loc60 at #loc158))
#loc165 = loc(callsite(#loc73 at #loc160))
