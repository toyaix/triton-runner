#loc = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)
#loc1 = loc(unknown)
#loc63 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:46)
#loc76 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":162:29)
#loc100 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:50)
#loc109 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":200:33)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#loc159 = loc(callsite(#loc1 at #loc63))
#loc161 = loc(callsite(#loc1 at #loc76))
#loc163 = loc(callsite(#loc1 at #loc100))
#loc165 = loc(callsite(#loc1 at #loc109))
module attributes {tlx.has_explicit_local_mem_access = true, tlx.has_tlx_ops = true, tlx.has_warp_spec_ops = true, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_attn_fwd_ws_pipelined_pingpong(%arg0: f32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg2: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg4: !tt.tensordesc<tensor<64x128xf16>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg5: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg6: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg7: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg8: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg9: !tt.tensordesc<tensor<128x128xf16>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg10: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg11: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg12: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg13: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg14: !tt.tensordesc<tensor<128x128xf16>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg15: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg16: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg17: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg18: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg19: !tt.tensordesc<tensor<64x128xf16>> loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg20: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg21: i32 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg22: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg23: i64 loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0), %arg24: i32 {tt.divisibility = 16 : i32} loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = ttg.local_alloc : () -> !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(#loc2)
    %1 = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc3)
    %2 = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc4)
    %3 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc5)
    %4 = ttg.memdesc_subview %3[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    ttng.init_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    %5 = ttg.memdesc_subview %3[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    ttng.init_barrier %5, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc5)
    %6 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc6)
    %7 = ttg.memdesc_subview %6[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    ttng.init_barrier %7, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    %8 = ttg.memdesc_subview %6[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    ttng.init_barrier %8, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc6)
    %9 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc7)
    %10 = ttg.memdesc_subview %9[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    ttng.init_barrier %10, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    %11 = ttg.memdesc_subview %9[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    ttng.init_barrier %11, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc7)
    %12 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc8)
    %13 = ttg.memdesc_subview %12[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    ttng.init_barrier %13, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    %14 = ttg.memdesc_subview %12[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    ttng.init_barrier %14, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc8)
    %15 = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc9)
    %16 = ttg.memdesc_subview %15[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttng.init_barrier %16, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    %17 = ttg.memdesc_subview %15[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttng.init_barrier %17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc9)
    ttg.warp_specialize(%arg3, %arg1, %arg24, %arg19, %6, %9, %1, %3, %0, %arg0, %12, %15, %2) attributes {requestedRegisters = array<i32: 232, 232>}
    default {
      %18 = tt.get_program_id x : i32 loc(#loc11)
      %19 = tt.get_program_id y : i32 loc(#loc12)
      %20 = arith.divsi %19, %arg3 : i32 loc(#loc13)
      %21 = arith.remsi %19, %arg3 : i32 loc(#loc14)
      %22 = arith.muli %arg24, %arg3 : i32 loc(#loc15)
      %23 = arith.muli %20, %22 : i32 loc(#loc16)
      %24 = arith.muli %21, %arg24 : i32 loc(#loc17)
      %25 = arith.addi %23, %24 : i32 loc(#loc18)
      %26 = arith.muli %18, %c128_i32 : i32 loc(#loc19)
      %27 = arith.addi %25, %26 : i32 loc(#loc20)
      %c2_i32_0 = arith.constant 2 : i32 loc(#loc21)
      %28 = ttg.memdesc_subview %3[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc22)
      ttng.barrier_expect %28, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc23)
      %29 = arith.muli %c0_i32, %c64_i32 : i32 loc(#loc24)
      %30 = arith.addi %27, %29 : i32 loc(#loc25)
      %31 = ttg.memdesc_subview %0[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc26)
      %32 = ttng.tensor_desc_to_tma_ptr %arg4 : !tt.tensordesc<tensor<64x128xf16>> to !tt.ptr<i8> loc(#loc27)
      ttng.async_tma_copy_global_to_local %32[%30, %c0_i32] %31, %28, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc27)
      %c1_i32_1 = arith.constant 1 : i32 loc(#loc21)
      %33 = arith.muli %c1_i32, %c1_i32_1 : i32 loc(#loc21)
      %34 = arith.addi %c0_i32, %33 : i32 loc(#loc21)
      %35 = ttg.memdesc_subview %3[%34] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc22)
      ttng.barrier_expect %35, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc23)
      %36 = arith.muli %34, %c64_i32 : i32 loc(#loc24)
      %37 = arith.addi %27, %36 : i32 loc(#loc25)
      %38 = ttg.memdesc_subview %0[%34, %c0_i32, %c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc26)
      %39 = ttng.tensor_desc_to_tma_ptr %arg4 : !tt.tensordesc<tensor<64x128xf16>> to !tt.ptr<i8> loc(#loc27)
      ttng.async_tma_copy_global_to_local %39[%37, %c0_i32] %38, %35, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc27)
      %40:3 = scf.for %arg25 = %c0_i32 to %arg24 step %c128_i32 iter_args(%arg26 = %c0_i32, %arg27 = %25, %arg28 = %c0_i32) -> (i32, i32, i32)  : i32 {
        %41 = arith.remsi %arg28, %c2_i32 : i32 loc(#loc29)
        %42 = arith.cmpi eq, %41, %c0_i32 : i32 loc(#loc30)
        %43 = arith.extui %42 : i1 to i32 loc(#loc31)
        %44 = arith.xori %arg26, %43 : i32 loc(#loc31)
        %45 = ttg.memdesc_subview %6[%41] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc32)
        ttng.wait_barrier %45, %44, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc33)
        %46 = ttg.memdesc_subview %9[%41] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc34)
        ttng.barrier_expect %46, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc35)
        %47 = ttg.memdesc_subview %1[%41, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc36)
        %48 = ttng.tensor_desc_to_tma_ptr %arg9 : !tt.tensordesc<tensor<128x128xf16>> to !tt.ptr<i8> loc(#loc37)
        ttng.async_tma_copy_global_to_local %48[%arg27, %c0_i32] %47, %46, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc37)
        %49 = ttg.memdesc_subview %12[%41] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc38)
        ttng.wait_barrier %49, %44, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc39)
        %50 = ttg.memdesc_subview %15[%41] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc40)
        ttng.barrier_expect %50, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc41)
        %51 = ttg.memdesc_subview %2[%41, %c0_i32, %c0_i32] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc42)
        %52 = ttng.tensor_desc_to_tma_ptr %arg14 : !tt.tensordesc<tensor<128x128xf16>> to !tt.ptr<i8> loc(#loc43)
        ttng.async_tma_copy_global_to_local %52[%arg27, %c0_i32] %51, %50, %true : !tt.ptr<i8>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc43)
        %53 = arith.addi %arg27, %c128_i32 : i32 loc(#loc44)
        %54 = arith.addi %arg28, %c1_i32 : i32 loc(#loc45)
        scf.yield %44, %53, %54 : i32, i32, i32 loc(#loc46)
      } loc(#loc28)
      ttg.warp_yield loc(#loc1)
    }
    partition0(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %cst = arith.constant dense<0.000000e+00> : tensor<64x1xf32> loc(#loc1)
      %c2_i32_0 = arith.constant 2 : i32 loc(#loc1)
      %c128_i32_1 = arith.constant 128 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc1)
      %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc1)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc1)
      %c1_i32_3 = arith.constant 1 : i32 loc(#loc1)
      %true_4 = arith.constant true loc(#loc1)
      %c0_i32_5 = arith.constant 0 : i32 loc(#loc1)
      %cst_6 = arith.constant 1.44269502 : f32 loc(#loc1)
      %cst_7 = arith.constant dense<0xFF800000> : tensor<64xf32> loc(#loc47)
      %18 = arith.mulf %arg34, %cst_6 : f32 loc(#loc48)
      %19 = ttg.memdesc_subview %arg32[%c0_i32_5] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc49)
      ttng.wait_barrier %19, %c0_i32_5, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc50)
      %20 = ttg.memdesc_subview %arg30[%c0_i32_5] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc51)
      ttng.wait_barrier %20, %c0_i32_5, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      %21 = ttg.memdesc_subview %arg31[%c0_i32_5, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc53)
      %22 = ttg.memdesc_trans %21 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc54)
      ttng.wait_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc55)
      %23 = ttg.memdesc_subview %arg33[%c0_i32_5, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc56)
      %24 = tlx.require_layout %cst_2 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc57)
      %25 = ttng.warp_group_dot %23, %22, %24 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc57)
      ttng.arrive_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc58)
      %26 = ttng.warp_group_dot_wait %25 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc59)
      %27 = tlx.release_layout %26 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc57)
      %28 = ttg.memdesc_subview %arg29[%c0_i32_5] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc60)
      ttng.arrive_barrier %28, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc61)
      %29 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc63)), %arg39: f32 loc(callsite(#loc1 at #loc63))):
        %84 = arith.maxnumf %arg38, %arg39 : f32 loc(#loc166)
        tt.reduce.return %84 : f32 loc(#loc158)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc158)
      %30 = tt.splat %18 : f32 -> tensor<64xf32> loc(#loc65)
      %31 = arith.mulf %29, %30 : tensor<64xf32> loc(#loc65)
      %32 = arith.maxnumf %31, %cst_7 : tensor<64xf32> loc(#loc66)
      %33 = tt.splat %18 : f32 -> tensor<64x128xf32> loc(#loc67)
      %34 = arith.mulf %27, %33 : tensor<64x128xf32> loc(#loc67)
      %35 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc68)
      %36 = tt.broadcast %35 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc69)
      %37 = arith.subf %34, %36 : tensor<64x128xf32> loc(#loc69)
      %38 = math.exp2 %37 : tensor<64x128xf32> loc(#loc70)
      %39 = arith.subf %cst_7, %32 : tensor<64xf32> loc(#loc71)
      %40 = math.exp2 %39 : tensor<64xf32> loc(#loc72)
      %41 = tt.expand_dims %40 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc73)
      %42 = arith.mulf %41, %cst : tensor<64x1xf32> loc(#loc74)
      %43 = tt.broadcast %42 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc74)
      %44 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc76)), %arg39: f32 loc(callsite(#loc1 at #loc76))):
        %84 = arith.addf %arg38, %arg39 : f32 loc(#loc167)
        tt.reduce.return %84 : f32 loc(#loc160)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc160)
      %45 = arith.addf %40, %44 : tensor<64xf32> loc(#loc78)
      %46:7 = scf.for %arg38 = %c128_i32_1 to %arg27 step %c128_i32_1 iter_args(%arg39 = %c0_i32_5, %arg40 = %c1_i32_3, %arg41 = %38, %arg42 = %43, %arg43 = %45, %arg44 = %32, %arg45 = %c1_i32_3) -> (i32, i32, tensor<64x128xf32>, tensor<64x128xf32>, tensor<64xf32>, tensor<64xf32>, i32)  : i32 {
        %84 = arith.remsi %arg45, %c2_i32_0 : i32 loc(#loc80)
        %85 = arith.cmpi eq, %84, %c0_i32_5 : i32 loc(#loc81)
        %86 = arith.extui %85 : i1 to i32 loc(#loc82)
        %87 = arith.xori %arg39, %86 : i32 loc(#loc82)
        %88 = ttg.memdesc_subview %arg30[%84] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc83)
        ttng.wait_barrier %88, %87, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc84)
        %89 = ttg.memdesc_subview %arg31[%84, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc85)
        %90 = ttg.memdesc_trans %89 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc86)
        %91 = ttng.warp_group_dot %23, %90, %24 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc87)
        %92 = arith.subi %arg45, %c1_i32_3 : i32 loc(#loc88)
        %93 = arith.remsi %92, %c2_i32_0 : i32 loc(#loc89)
        %94 = arith.cmpi eq, %93, %c0_i32_5 : i32 loc(#loc90)
        %95 = arith.extui %94 : i1 to i32 loc(#loc91)
        %96 = arith.xori %arg40, %95 : i32 loc(#loc91)
        %97 = ttg.memdesc_subview %arg36[%93] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc92)
        ttng.wait_barrier %97, %96, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc93)
        %98 = arith.truncf %arg41 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc94)
        %99 = ttg.memdesc_subview %arg37[%93, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc95)
        %100 = tlx.require_layout %arg42 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc96)
        %101 = tlx.require_layout %98 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc96)
        %102 = ttng.warp_group_dot %101, %99, %100 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc96)
        %103 = ttng.warp_group_dot_wait %91 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc97)
        %104 = tlx.release_layout %103 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc87)
        %105 = ttg.memdesc_subview %arg29[%84] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc98)
        ttng.arrive_barrier %105, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc99)
        %106 = "tt.reduce"(%104) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc100)), %arg47: f32 loc(callsite(#loc1 at #loc100))):
          %126 = arith.maxnumf %arg46, %arg47 : f32 loc(#loc168)
          tt.reduce.return %126 : f32 loc(#loc162)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc162)
        %107 = arith.mulf %106, %30 : tensor<64xf32> loc(#loc101)
        %108 = arith.maxnumf %arg44, %107 : tensor<64xf32> loc(#loc102)
        %109 = arith.mulf %104, %33 : tensor<64x128xf32> loc(#loc103)
        %110 = tt.expand_dims %108 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc104)
        %111 = tt.broadcast %110 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc105)
        %112 = arith.subf %109, %111 : tensor<64x128xf32> loc(#loc105)
        %113 = math.exp2 %112 : tensor<64x128xf32> loc(#loc106)
        %114 = arith.subf %arg44, %108 : tensor<64xf32> loc(#loc107)
        %115 = math.exp2 %114 : tensor<64xf32> loc(#loc108)
        %116 = "tt.reduce"(%113) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc109)), %arg47: f32 loc(callsite(#loc1 at #loc109))):
          %126 = arith.addf %arg46, %arg47 : f32 loc(#loc169)
          tt.reduce.return %126 : f32 loc(#loc164)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc164)
        %117 = arith.mulf %arg43, %115 : tensor<64xf32> loc(#loc110)
        %118 = arith.addf %117, %116 : tensor<64xf32> loc(#loc111)
        %119 = ttng.warp_group_dot_wait %102 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc112)
        %120 = tlx.release_layout %119 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc96)
        %121 = ttg.memdesc_subview %arg35[%93] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc113)
        ttng.arrive_barrier %121, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc114)
        %122 = tt.expand_dims %115 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc115)
        %123 = tt.broadcast %122 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc116)
        %124 = arith.mulf %120, %123 : tensor<64x128xf32> loc(#loc116)
        %125 = arith.addi %arg45, %c1_i32_3 : i32 loc(#loc117)
        scf.yield %87, %96, %113, %124, %118, %108, %125 : i32, i32, tensor<64x128xf32>, tensor<64x128xf32>, tensor<64xf32>, tensor<64xf32>, i32 loc(#loc118)
      } loc(#loc79)
      %47 = arith.subi %46#6, %c1_i32_3 : i32 loc(#loc119)
      %48 = arith.remsi %47, %c2_i32_0 : i32 loc(#loc120)
      %49 = arith.cmpi eq, %48, %c0_i32_5 : i32 loc(#loc121)
      %50 = arith.extui %49 : i1 to i32 loc(#loc122)
      %51 = arith.xori %46#1, %50 : i32 loc(#loc122)
      %52 = ttg.memdesc_subview %arg36[%48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc123)
      ttng.wait_barrier %52, %51, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc124)
      %53 = arith.truncf %46#2 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc125)
      %54 = ttg.memdesc_subview %arg37[%48, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc126)
      %55 = tlx.require_layout %46#3 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc127)
      %56 = tlx.require_layout %53 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc127)
      %57 = ttng.warp_group_dot %56, %54, %55 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc127)
      %58 = ttng.warp_group_dot_wait %57 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc128)
      %59 = tlx.release_layout %58 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc127)
      %60 = ttg.memdesc_subview %arg35[%48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc129)
      ttng.arrive_barrier %60, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc130)
      %61 = tt.get_program_id x : i32 loc(#loc131)
      %62 = tt.get_program_id y : i32 loc(#loc132)
      %63 = arith.divsi %62, %arg25 : i32 loc(#loc133)
      %64 = arith.remsi %62, %arg25 : i32 loc(#loc134)
      %65 = arith.muli %arg27, %arg25 : i32 loc(#loc135)
      %66 = arith.muli %63, %65 : i32 loc(#loc136)
      %67 = arith.muli %64, %arg27 : i32 loc(#loc137)
      %68 = arith.addi %66, %67 : i32 loc(#loc138)
      %69 = arith.muli %61, %c128_i32_1 : i32 loc(#loc139)
      %70 = arith.addi %68, %69 : i32 loc(#loc140)
      %71 = math.log2 %46#4 : tensor<64xf32> loc(#loc141)
      %72 = arith.addf %46#5, %71 : tensor<64xf32> loc(#loc142)
      %73 = tt.expand_dims %46#4 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc143)
      %74 = tt.broadcast %73 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc144)
      %75 = arith.divf %59, %74 : tensor<64x128xf32> loc(#loc144)
      %76 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc145)
      %77 = tt.splat %69 : i32 -> tensor<64xi32> loc(#loc146)
      %78 = arith.addi %77, %76 : tensor<64xi32> loc(#loc146)
      %79 = arith.muli %62, %arg27 : i32 loc(#loc147)
      %80 = tt.addptr %arg26, %79 : !tt.ptr<f32>, i32 loc(#loc148)
      %81 = tt.splat %80 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc149)
      %82 = tt.addptr %81, %78 : tensor<64x!tt.ptr<f32>>, tensor<64xi32> loc(#loc149)
      tt.store %82, %72 : tensor<64x!tt.ptr<f32>> loc(#loc150)
      %83 = arith.truncf %75 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc151)
      tt.descriptor_store %arg28[%70, %c0_i32_5], %83 : !tt.tensordesc<tensor<64x128xf16>>, tensor<64x128xf16> loc(#loc152)
      ttg.warp_return loc(#loc1)
    }
    partition1(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %cst = arith.constant dense<0.000000e+00> : tensor<64x1xf32> loc(#loc1)
      %c64_i32_0 = arith.constant 64 : i32 loc(#loc1)
      %c2_i32_1 = arith.constant 2 : i32 loc(#loc1)
      %c128_i32_2 = arith.constant 128 : i32 loc(#loc1)
      %cst_3 = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc1)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc1)
      %true_4 = arith.constant true loc(#loc1)
      %c0_i32_5 = arith.constant 0 : i32 loc(#loc1)
      %c1_i32_6 = arith.constant 1 : i32 loc(#loc1)
      %cst_7 = arith.constant 1.44269502 : f32 loc(#loc1)
      %cst_8 = arith.constant dense<0xFF800000> : tensor<64xf32> loc(#loc47)
      %18 = arith.mulf %arg34, %cst_7 : f32 loc(#loc48)
      %19 = ttg.memdesc_subview %arg32[%c1_i32_6] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc49)
      ttng.wait_barrier %19, %c0_i32_5, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc50)
      %20 = ttg.memdesc_subview %arg30[%c0_i32_5] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc51)
      ttng.wait_barrier %20, %c0_i32_5, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      %21 = ttg.memdesc_subview %arg31[%c0_i32_5, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc53)
      %22 = ttg.memdesc_trans %21 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc54)
      ttng.arrive_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc153)
      ttng.wait_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc154)
      %23 = ttg.memdesc_subview %arg33[%c1_i32_6, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc56)
      %24 = tlx.require_layout %cst_3 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc57)
      %25 = ttng.warp_group_dot %23, %22, %24 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc57)
      %26 = ttng.warp_group_dot_wait %25 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc59)
      %27 = tlx.release_layout %26 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc57)
      %28 = ttg.memdesc_subview %arg29[%c0_i32_5] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc60)
      ttng.arrive_barrier %28, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc61)
      %29 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc63)), %arg39: f32 loc(callsite(#loc1 at #loc63))):
        %86 = arith.maxnumf %arg38, %arg39 : f32 loc(#loc166)
        tt.reduce.return %86 : f32 loc(#loc158)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc158)
      %30 = tt.splat %18 : f32 -> tensor<64xf32> loc(#loc65)
      %31 = arith.mulf %29, %30 : tensor<64xf32> loc(#loc65)
      %32 = arith.maxnumf %31, %cst_8 : tensor<64xf32> loc(#loc66)
      %33 = tt.splat %18 : f32 -> tensor<64x128xf32> loc(#loc67)
      %34 = arith.mulf %27, %33 : tensor<64x128xf32> loc(#loc67)
      %35 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc68)
      %36 = tt.broadcast %35 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc69)
      %37 = arith.subf %34, %36 : tensor<64x128xf32> loc(#loc69)
      %38 = math.exp2 %37 : tensor<64x128xf32> loc(#loc70)
      %39 = arith.subf %cst_8, %32 : tensor<64xf32> loc(#loc71)
      %40 = math.exp2 %39 : tensor<64xf32> loc(#loc72)
      %41 = tt.expand_dims %40 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc73)
      %42 = arith.mulf %41, %cst : tensor<64x1xf32> loc(#loc74)
      %43 = tt.broadcast %42 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc74)
      %44 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
      ^bb0(%arg38: f32 loc(callsite(#loc1 at #loc76)), %arg39: f32 loc(callsite(#loc1 at #loc76))):
        %86 = arith.addf %arg38, %arg39 : f32 loc(#loc167)
        tt.reduce.return %86 : f32 loc(#loc160)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc160)
      %45 = arith.addf %40, %44 : tensor<64xf32> loc(#loc78)
      %46:7 = scf.for %arg38 = %c128_i32_2 to %arg27 step %c128_i32_2 iter_args(%arg39 = %c0_i32_5, %arg40 = %c1_i32_6, %arg41 = %38, %arg42 = %43, %arg43 = %45, %arg44 = %32, %arg45 = %c1_i32_6) -> (i32, i32, tensor<64x128xf32>, tensor<64x128xf32>, tensor<64xf32>, tensor<64xf32>, i32)  : i32 {
        %86 = arith.remsi %arg45, %c2_i32_1 : i32 loc(#loc80)
        %87 = arith.cmpi eq, %86, %c0_i32_5 : i32 loc(#loc81)
        %88 = arith.extui %87 : i1 to i32 loc(#loc82)
        %89 = arith.xori %arg39, %88 : i32 loc(#loc82)
        %90 = ttg.memdesc_subview %arg30[%86] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc83)
        ttng.wait_barrier %90, %89, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc84)
        %91 = ttg.memdesc_subview %arg31[%86, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc85)
        %92 = ttg.memdesc_trans %91 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc86)
        %93 = ttng.warp_group_dot %23, %92, %24 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc87)
        %94 = arith.subi %arg45, %c1_i32_6 : i32 loc(#loc88)
        %95 = arith.remsi %94, %c2_i32_1 : i32 loc(#loc89)
        %96 = arith.cmpi eq, %95, %c0_i32_5 : i32 loc(#loc90)
        %97 = arith.extui %96 : i1 to i32 loc(#loc91)
        %98 = arith.xori %arg40, %97 : i32 loc(#loc91)
        %99 = ttg.memdesc_subview %arg36[%95] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc92)
        ttng.wait_barrier %99, %98, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc93)
        %100 = arith.truncf %arg41 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc94)
        %101 = ttg.memdesc_subview %arg37[%95, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc95)
        %102 = tlx.require_layout %arg42 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc96)
        %103 = tlx.require_layout %100 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc96)
        %104 = ttng.warp_group_dot %103, %101, %102 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc96)
        %105 = ttng.warp_group_dot_wait %93 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc97)
        %106 = tlx.release_layout %105 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc87)
        %107 = ttg.memdesc_subview %arg29[%86] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc98)
        ttng.arrive_barrier %107, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc99)
        %108 = "tt.reduce"(%106) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc100)), %arg47: f32 loc(callsite(#loc1 at #loc100))):
          %128 = arith.maxnumf %arg46, %arg47 : f32 loc(#loc168)
          tt.reduce.return %128 : f32 loc(#loc162)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc162)
        %109 = arith.mulf %108, %30 : tensor<64xf32> loc(#loc101)
        %110 = arith.maxnumf %arg44, %109 : tensor<64xf32> loc(#loc102)
        %111 = arith.mulf %106, %33 : tensor<64x128xf32> loc(#loc103)
        %112 = tt.expand_dims %110 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc104)
        %113 = tt.broadcast %112 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc105)
        %114 = arith.subf %111, %113 : tensor<64x128xf32> loc(#loc105)
        %115 = math.exp2 %114 : tensor<64x128xf32> loc(#loc106)
        %116 = arith.subf %arg44, %110 : tensor<64xf32> loc(#loc107)
        %117 = math.exp2 %116 : tensor<64xf32> loc(#loc108)
        %118 = "tt.reduce"(%115) <{axis = 1 : i32}> ({
        ^bb0(%arg46: f32 loc(callsite(#loc1 at #loc109)), %arg47: f32 loc(callsite(#loc1 at #loc109))):
          %128 = arith.addf %arg46, %arg47 : f32 loc(#loc169)
          tt.reduce.return %128 : f32 loc(#loc164)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc164)
        %119 = arith.mulf %arg43, %117 : tensor<64xf32> loc(#loc110)
        %120 = arith.addf %119, %118 : tensor<64xf32> loc(#loc111)
        %121 = ttng.warp_group_dot_wait %104 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc112)
        %122 = tlx.release_layout %121 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc96)
        %123 = ttg.memdesc_subview %arg35[%95] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc113)
        ttng.arrive_barrier %123, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc114)
        %124 = tt.expand_dims %117 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc115)
        %125 = tt.broadcast %124 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc116)
        %126 = arith.mulf %122, %125 : tensor<64x128xf32> loc(#loc116)
        %127 = arith.addi %arg45, %c1_i32_6 : i32 loc(#loc117)
        scf.yield %89, %98, %115, %126, %120, %110, %127 : i32, i32, tensor<64x128xf32>, tensor<64x128xf32>, tensor<64xf32>, tensor<64xf32>, i32 loc(#loc118)
      } loc(#loc79)
      %47 = arith.subi %46#6, %c1_i32_6 : i32 loc(#loc119)
      %48 = arith.remsi %47, %c2_i32_1 : i32 loc(#loc120)
      %49 = arith.cmpi eq, %48, %c0_i32_5 : i32 loc(#loc121)
      %50 = arith.extui %49 : i1 to i32 loc(#loc122)
      %51 = arith.xori %46#1, %50 : i32 loc(#loc122)
      %52 = ttg.memdesc_subview %arg36[%48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc123)
      ttng.wait_barrier %52, %51, %true_4 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc124)
      %53 = arith.truncf %46#2 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc125)
      %54 = ttg.memdesc_subview %arg37[%48, %c0_i32_5, %c0_i32_5] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc126)
      %55 = tlx.require_layout %46#3 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc127)
      %56 = tlx.require_layout %53 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc127)
      %57 = ttng.warp_group_dot %56, %54, %55 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc127)
      %58 = ttng.warp_group_dot_wait %57 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc128)
      %59 = tlx.release_layout %58 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc127)
      %60 = ttg.memdesc_subview %arg35[%48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc129)
      ttng.arrive_barrier %60, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc130)
      %61 = tt.get_program_id x : i32 loc(#loc131)
      %62 = tt.get_program_id y : i32 loc(#loc132)
      %63 = arith.divsi %62, %arg25 : i32 loc(#loc133)
      %64 = arith.remsi %62, %arg25 : i32 loc(#loc134)
      %65 = arith.muli %arg27, %arg25 : i32 loc(#loc135)
      %66 = arith.muli %63, %65 : i32 loc(#loc136)
      %67 = arith.muli %64, %arg27 : i32 loc(#loc137)
      %68 = arith.addi %66, %67 : i32 loc(#loc138)
      %69 = arith.muli %61, %c128_i32_2 : i32 loc(#loc139)
      %70 = arith.addi %68, %69 : i32 loc(#loc140)
      %71 = arith.addi %70, %c64_i32_0 : i32 loc(#loc155)
      %72 = math.log2 %46#4 : tensor<64xf32> loc(#loc141)
      %73 = arith.addf %46#5, %72 : tensor<64xf32> loc(#loc142)
      %74 = tt.expand_dims %46#4 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc143)
      %75 = tt.broadcast %74 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc144)
      %76 = arith.divf %59, %75 : tensor<64x128xf32> loc(#loc144)
      %77 = arith.addi %69, %c64_i32_0 : i32 loc(#loc156)
      %78 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc145)
      %79 = tt.splat %77 : i32 -> tensor<64xi32> loc(#loc146)
      %80 = arith.addi %79, %78 : tensor<64xi32> loc(#loc146)
      %81 = arith.muli %62, %arg27 : i32 loc(#loc147)
      %82 = tt.addptr %arg26, %81 : !tt.ptr<f32>, i32 loc(#loc148)
      %83 = tt.splat %82 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc149)
      %84 = tt.addptr %83, %80 : tensor<64x!tt.ptr<f32>>, tensor<64xi32> loc(#loc149)
      tt.store %84, %73 : tensor<64x!tt.ptr<f32>> loc(#loc150)
      %85 = arith.truncf %76 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc151)
      tt.descriptor_store %arg28[%71, %c0_i32_5], %85 : !tt.tensordesc<tensor<64x128xf16>>, tensor<64x128xf16> loc(#loc152)
      ttg.warp_return loc(#loc1)
    } : (i32, !tt.ptr<f32>, i32, !tt.tensordesc<tensor<64x128xf16>>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable>, f32, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>) -> () loc(#loc10)
    tt.return loc(#loc157)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":54:79)
#loc3 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":55:73)
#loc4 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":56:73)
#loc5 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":59:62)
#loc6 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":60:61)
#loc7 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":61:59)
#loc8 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":62:61)
#loc9 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":63:59)
#loc10 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:9)
#loc11 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":69:36)
#loc12 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":70:35)
#loc13 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":71:30)
#loc14 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":72:29)
#loc15 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:40)
#loc16 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:32)
#loc17 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:53)
#loc18 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:45)
#loc19 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:47)
#loc20 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:37)
#loc21 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":79:51)
#loc22 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:49)
#loc23 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:55)
#loc24 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:56)
#loc25 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:50)
#loc26 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:58)
#loc27 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:88)
#loc28 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":87:38)
#loc29 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":88:35)
#loc30 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:49)
#loc31 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:39)
#loc32 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:43)
#loc33 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:52)
#loc34 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:49)
#loc35 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:58)
#loc36 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:58)
#loc37 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:85)
#loc38 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:43)
#loc39 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:52)
#loc40 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:49)
#loc41 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:58)
#loc42 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:58)
#loc43 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:85)
#loc44 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":104:31)
#loc45 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:27)
#loc46 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:16)
#loc47 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":110:64)
#loc48 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":116:24)
#loc49 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:37)
#loc50 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:43)
#loc51 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:37)
#loc52 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:48)
#loc53 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:45)
#loc54 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:37)
#loc55 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":136:42)
#loc56 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:39)
#loc57 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:45)
#loc58 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":147:45)
#loc59 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":150:39)
#loc60 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:41)
#loc61 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:52)
#loc62 = loc("/root/triton/python/triton/language/standard.py":188:40)
#loc64 = loc("/root/triton/python/triton/language/standard.py":167:27)
#loc65 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:51)
#loc66 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:35)
#loc67 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:22)
#loc68 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:38)
#loc69 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:33)
#loc70 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":157:29)
#loc71 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:39)
#loc72 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:33)
#loc73 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:30)
#loc74 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:24)
#loc75 = loc("/root/triton/python/triton/language/standard.py":290:36)
#loc77 = loc("/root/triton/python/triton/language/standard.py":260:15)
#loc78 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":163:32)
#loc79 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":168:48)
#loc80 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":169:37)
#loc81 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:49)
#loc82 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:37)
#loc83 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:41)
#loc84 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:52)
#loc85 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:49)
#loc86 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:41)
#loc87 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":178:49)
#loc88 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:38)
#loc89 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:43)
#loc90 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:49)
#loc91 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:37)
#loc92 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:41)
#loc93 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:52)
#loc94 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":186:25)
#loc95 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:47)
#loc96 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:58)
#loc97 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":190:43)
#loc98 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:45)
#loc99 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:56)
#loc101 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:55)
#loc102 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:39)
#loc103 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:26)
#loc104 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:42)
#loc105 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:37)
#loc106 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":197:33)
#loc107 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:43)
#loc108 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:37)
#loc110 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:28)
#loc111 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:36)
#loc112 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":207:44)
#loc113 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:45)
#loc114 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:56)
#loc115 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:34)
#loc116 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:28)
#loc117 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:27)
#loc118 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:16)
#loc119 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:34)
#loc120 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:39)
#loc121 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:45)
#loc122 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:33)
#loc123 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:37)
#loc124 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:48)
#loc125 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":219:21)
#loc126 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:43)
#loc127 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:54)
#loc128 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":222:40)
#loc129 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:41)
#loc130 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:52)
#loc131 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":227:36)
#loc132 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":228:35)
#loc133 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":229:30)
#loc134 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":230:29)
#loc135 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:40)
#loc136 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:32)
#loc137 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:53)
#loc138 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:45)
#loc139 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:47)
#loc140 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:37)
#loc141 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:32)
#loc142 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:19)
#loc143 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:28)
#loc144 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:24)
#loc145 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:76)
#loc146 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:63)
#loc147 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:34)
#loc148 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:25)
#loc149 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:42)
#loc150 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":238:29)
#loc151 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:56)
#loc152 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:49)
#loc153 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":139:44)
#loc154 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":141:43)
#loc155 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":233:46)
#loc156 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:41)
#loc157 = loc("/root/triton-runner/examples/runner/TLX/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:4)
#loc158 = loc(callsite(#loc62 at #loc63))
#loc160 = loc(callsite(#loc75 at #loc76))
#loc162 = loc(callsite(#loc62 at #loc100))
#loc164 = loc(callsite(#loc75 at #loc109))
#loc166 = loc(callsite(#loc64 at #loc158))
#loc167 = loc(callsite(#loc77 at #loc160))
#loc168 = loc(callsite(#loc64 at #loc162))
#loc169 = loc(callsite(#loc77 at #loc164))
