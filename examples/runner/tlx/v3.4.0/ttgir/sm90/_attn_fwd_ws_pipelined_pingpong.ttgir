#blocked = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)
#loc1 = loc(unknown)
#loc60 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:46)
#loc72 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":162:29)
#loc96 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:50)
#loc105 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":200:33)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#loc154 = loc("sm_scale"(#loc))
#loc155 = loc("M"(#loc))
#loc156 = loc("Z"(#loc))
#loc157 = loc("H"(#loc))
#loc158 = loc("desc_q"(#loc))
#loc159 = loc("desc_k"(#loc))
#loc160 = loc("desc_v"(#loc))
#loc161 = loc("desc_o"(#loc))
#loc162 = loc("N_CTX"(#loc))
#loc195 = loc("m_ij"(#loc60))
#loc205 = loc("l_ij"(#loc72))
#loc222 = loc("m_ij"(#loc96))
#loc231 = loc("l_ij"(#loc105))
#loc269 = loc(callsite(#loc1 at #loc195))
#loc271 = loc(callsite(#loc1 at #loc205))
#loc274 = loc(callsite(#loc1 at #loc222))
#loc276 = loc(callsite(#loc1 at #loc231))
module attributes {tlx.has_explicit_local_mem_access = true, tlx.has_tlx_ops = true, tlx.has_warp_spec_ops = true, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_attn_fwd_ws_pipelined_pingpong(%sm_scale: f32 loc("sm_scale"(#loc)), %M: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("M"(#loc)), %Z: i32 loc("Z"(#loc)), %H: i32 {tt.divisibility = 16 : i32} loc("H"(#loc)), %desc_q: !tt.tensordesc<tensor<64x128xf16, #shared>> loc("desc_q"(#loc)), %desc_q_0: i32 loc("desc_q"(#loc)), %desc_q_1: i32 loc("desc_q"(#loc)), %desc_q_2: i64 loc("desc_q"(#loc)), %desc_q_3: i64 loc("desc_q"(#loc)), %desc_k: !tt.tensordesc<tensor<128x128xf16, #shared>> loc("desc_k"(#loc)), %desc_k_4: i32 loc("desc_k"(#loc)), %desc_k_5: i32 loc("desc_k"(#loc)), %desc_k_6: i64 loc("desc_k"(#loc)), %desc_k_7: i64 loc("desc_k"(#loc)), %desc_v: !tt.tensordesc<tensor<128x128xf16, #shared>> loc("desc_v"(#loc)), %desc_v_8: i32 loc("desc_v"(#loc)), %desc_v_9: i32 loc("desc_v"(#loc)), %desc_v_10: i64 loc("desc_v"(#loc)), %desc_v_11: i64 loc("desc_v"(#loc)), %desc_o: !tt.tensordesc<tensor<64x128xf16, #shared>> loc("desc_o"(#loc)), %desc_o_12: i32 loc("desc_o"(#loc)), %desc_o_13: i32 loc("desc_o"(#loc)), %desc_o_14: i64 loc("desc_o"(#loc)), %desc_o_15: i64 loc("desc_o"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %q_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(#loc163)
    %k_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc164)
    %v_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc165)
    %q_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc166)
    %q_fulls_16 = ttg.memdesc_index %q_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc166)
    ttng.init_barrier %q_fulls_16, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc166)
    %q_fulls_17 = ttg.memdesc_index %q_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc166)
    ttng.init_barrier %q_fulls_17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc166)
    %k_empties = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc167)
    %k_empties_18 = ttg.memdesc_index %k_empties[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc167)
    ttng.init_barrier %k_empties_18, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc167)
    %k_empties_19 = ttg.memdesc_index %k_empties[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc167)
    ttng.init_barrier %k_empties_19, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc167)
    %k_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc168)
    %k_fulls_20 = ttg.memdesc_index %k_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc168)
    ttng.init_barrier %k_fulls_20, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc168)
    %k_fulls_21 = ttg.memdesc_index %k_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc168)
    ttng.init_barrier %k_fulls_21, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc168)
    %v_empties = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc169)
    %v_empties_22 = ttg.memdesc_index %v_empties[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc169)
    ttng.init_barrier %v_empties_22, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc169)
    %v_empties_23 = ttg.memdesc_index %v_empties[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc169)
    ttng.init_barrier %v_empties_23, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc169)
    %v_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc170)
    %v_fulls_24 = ttg.memdesc_index %v_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    ttng.init_barrier %v_fulls_24, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    %v_fulls_25 = ttg.memdesc_index %v_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    ttng.init_barrier %v_fulls_25, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    ttg.warp_specialize(%H, %M, %N_CTX, %desc_o, %k_empties, %k_fulls, %k_tiles, %q_fulls, %q_tiles, %sm_scale, %v_empties, %v_fulls, %v_tiles) attributes {requestedRegisters = array<i32: 232, 232>}
    default {
      %start_m = tt.get_program_id x : i32 loc(#loc171)
      %off_hz = tt.get_program_id y : i32 loc(#loc172)
      %off_z = arith.divsi %off_hz, %H : i32 loc(#loc173)
      %off_h = arith.remsi %off_hz, %H : i32 loc(#loc174)
      %offset_y = arith.muli %N_CTX, %H : i32 loc(#loc175)
      %offset_y_26 = arith.muli %off_z, %offset_y : i32 loc(#loc176)
      %offset_y_27 = arith.muli %off_h, %N_CTX : i32 loc(#loc177)
      %offset_y_28 = arith.addi %offset_y_26, %offset_y_27 : i32 loc(#loc178)
      %qo_offset_y = arith.muli %start_m, %c128_i32 : i32 loc(#loc179)
      %qo_offset_y_29 = arith.addi %offset_y_28, %qo_offset_y : i32 loc(#loc180)
      ttng.barrier_expect %q_fulls_16, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc21)
      %0 = ttg.memdesc_index %q_tiles[%c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc22)
      ttng.async_tma_copy_global_to_local %desc_q[%qo_offset_y_29, %c0_i32] %0, %q_fulls_16, %true : !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc23)
      ttng.barrier_expect %q_fulls_17, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc21)
      %qo_offset_y_split = arith.addi %qo_offset_y_29, %c64_i32 : i32 loc(#loc181)
      %1 = ttg.memdesc_index %q_tiles[%c1_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc22)
      ttng.async_tma_copy_global_to_local %desc_q[%qo_offset_y_split, %c0_i32] %1, %q_fulls_17, %true : !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc23)
      %acc_cnt:3 = scf.for %_ = %c0_i32 to %N_CTX step %c128_i32 iter_args(%kv_offset_y = %offset_y_28, %kv_phase = %c0_i32, %acc_cnt_30 = %c0_i32) -> (i32, i32, i32)  : i32 {
        %buf_id = arith.remsi %acc_cnt_30, %c2_i32 : i32 loc(#loc183)
        %kv_phase_31 = arith.cmpi eq, %buf_id, %c0_i32 : i32 loc(#loc184)
        %kv_phase_32 = arith.extui %kv_phase_31 : i1 to i32 loc(#loc185)
        %kv_phase_33 = arith.xori %kv_phase, %kv_phase_32 : i32 loc(#loc185)
        %2 = ttg.memdesc_index %k_empties[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc29)
        ttng.wait_barrier %2, %kv_phase_33, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc30)
        %3 = ttg.memdesc_index %k_fulls[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc31)
        ttng.barrier_expect %3, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc32)
        %4 = ttg.memdesc_index %k_tiles[%buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc33)
        ttng.async_tma_copy_global_to_local %desc_k[%kv_offset_y, %c0_i32] %4, %3, %true : !tt.tensordesc<tensor<128x128xf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc34)
        %5 = ttg.memdesc_index %v_empties[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc35)
        ttng.wait_barrier %5, %kv_phase_33, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc36)
        %6 = ttg.memdesc_index %v_fulls[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc37)
        ttng.barrier_expect %6, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc38)
        %7 = ttg.memdesc_index %v_tiles[%buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc39)
        ttng.async_tma_copy_global_to_local %desc_v[%kv_offset_y, %c0_i32] %7, %6, %true : !tt.tensordesc<tensor<128x128xf16, #shared>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc40)
        %kv_offset_y_34 = arith.addi %kv_offset_y, %c128_i32 : i32 loc(#loc186)
        %acc_cnt_35 = arith.addi %acc_cnt_30, %c1_i32 : i32 loc(#loc187)
        scf.yield %kv_offset_y_34, %kv_phase_33, %acc_cnt_35 : i32, i32, i32 loc(#loc43)
      } loc(#loc277)
      ttg.warp_yield loc(#loc1)
    }
    partition0(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16, #shared>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %qk = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc188)
      %cst = arith.constant 1.44269502 : f32 loc(#loc1)
      %c0_i32_26 = arith.constant 0 : i32 loc(#loc1)
      %true_27 = arith.constant true loc(#loc1)
      %c1_i32_28 = arith.constant 1 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc45)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc46)
      %c128_i32_29 = arith.constant 128 : i32 loc(#loc1)
      %c2_i32_30 = arith.constant 2 : i32 loc(#loc1)
      %acc = arith.constant dense<0.000000e+00> : tensor<64x1xf32, #mma> loc(#loc189)
      %cst_31 = arith.constant dense<0xFF800000> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
      %qk_scale = arith.mulf %arg34, %cst : f32 loc(#loc190)
      %0 = ttg.memdesc_index %arg32[%c0_i32_26] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc49)
      ttng.wait_barrier %0, %c0_i32_26, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc50)
      %1 = ttg.memdesc_index %arg30[%c0_i32_26] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc51)
      ttng.wait_barrier %1, %c0_i32_26, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      %k_tile = ttg.memdesc_index %arg31[%c0_i32_26] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc191)
      %k_tile_32 = ttg.memdesc_trans %k_tile {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc192)
      ttng.wait_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc45)
      %qk_33 = ttg.memdesc_index %arg33[%c0_i32_26] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc193)
      %qk_34 = ttng.warp_group_dot %qk_33, %k_tile_32, %qk {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc188)
      ttng.arrive_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc46)
      %qk_35 = ttng.warp_group_dot_wait %qk_34 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc194)
      %2 = ttg.memdesc_index %arg29[%c0_i32_26] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc57)
      ttng.arrive_barrier %2, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc58)
      %m_ij = "tt.reduce"(%qk_35) <{axis = 1 : i32}> ({
      ^bb0(%m_ij_69: f32 loc(callsite(#loc1 at #loc195)), %m_ij_70: f32 loc(callsite(#loc1 at #loc195))):
        %m_ij_71 = arith.maxnumf %m_ij_69, %m_ij_70 : f32 loc(#loc278)
        tt.reduce.return %m_ij_71 : f32 loc(#loc268)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc268)
      %m_ij_36 = tt.splat %qk_scale : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc196)
      %m_ij_37 = arith.mulf %m_ij, %m_ij_36 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc196)
      %m_ij_38 = arith.maxnumf %m_ij_37, %cst_31 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc197)
      %qk_39 = tt.splat %qk_scale : f32 -> tensor<64x128xf32, #mma> loc(#loc198)
      %qk_40 = arith.mulf %qk_35, %qk_39 : tensor<64x128xf32, #mma> loc(#loc198)
      %qk_41 = tt.expand_dims %m_ij_38 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc199)
      %qk_42 = tt.broadcast %qk_41 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc200)
      %qk_43 = arith.subf %qk_40, %qk_42 : tensor<64x128xf32, #mma> loc(#loc200)
      %p = math.exp2 %qk_43 : tensor<64x128xf32, #mma> loc(#loc201)
      %alpha = arith.subf %cst_31, %m_ij_38 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc202)
      %alpha_44 = math.exp2 %alpha : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc203)
      %acc_45 = tt.expand_dims %alpha_44 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc204)
      %acc_46 = arith.mulf %acc_45, %acc : tensor<64x1xf32, #mma> loc(#loc189)
      %acc_47 = tt.broadcast %acc_46 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc189)
      %l_ij = "tt.reduce"(%p) <{axis = 1 : i32}> ({
      ^bb0(%l_ij_69: f32 loc(callsite(#loc1 at #loc205)), %l_ij_70: f32 loc(callsite(#loc1 at #loc205))):
        %l_ij_71 = arith.addf %l_ij_69, %l_ij_70 : f32 loc(#loc279)
        tt.reduce.return %l_ij_71 : f32 loc(#loc270)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc270)
      %l_i = arith.addf %alpha_44, %l_ij : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc206)
      %acc_cnt:7 = scf.for %acc_cnt_69 = %c128_i32_29 to %arg27 step %c128_i32_29 iter_args(%m_ij_70 = %m_ij_38, %l_i_71 = %l_i, %acc_cnt_72 = %acc_47, %arg42 = %c0_i32_26, %arg43 = %c1_i32_28, %p_73 = %p, %arg45 = %c1_i32_28) -> (tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64x128xf32, #mma>, i32, i32, tensor<64x128xf32, #mma>, i32)  : i32 {
        %k_buf_id = arith.remsi %arg45, %c2_i32_30 : i32 loc(#loc208)
        %k_phase = arith.cmpi eq, %k_buf_id, %c0_i32_26 : i32 loc(#loc209)
        %k_phase_74 = arith.extui %k_phase : i1 to i32 loc(#loc210)
        %k_phase_75 = arith.xori %arg42, %k_phase_74 : i32 loc(#loc210)
        %8 = ttg.memdesc_index %arg30[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc79)
        ttng.wait_barrier %8, %k_phase_75, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc80)
        %k_tile_76 = ttg.memdesc_index %arg31[%k_buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc211)
        %k_tile_77 = ttg.memdesc_trans %k_tile_76 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc212)
        %qk_78 = ttng.warp_group_dot %qk_33, %k_tile_77, %qk {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc213)
        %v_buf_id_79 = arith.subi %arg45, %c1_i32_28 : i32 loc(#loc214)
        %v_buf_id_80 = arith.remsi %v_buf_id_79, %c2_i32_30 : i32 loc(#loc215)
        %v_phase_81 = arith.cmpi eq, %v_buf_id_80, %c0_i32_26 : i32 loc(#loc216)
        %v_phase_82 = arith.extui %v_phase_81 : i1 to i32 loc(#loc217)
        %v_phase_83 = arith.xori %arg43, %v_phase_82 : i32 loc(#loc217)
        %9 = ttg.memdesc_index %arg36[%v_buf_id_80] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc88)
        ttng.wait_barrier %9, %v_phase_83, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc89)
        %p_84 = arith.truncf %p_73 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc218)
        %acc_85 = ttg.memdesc_index %arg37[%v_buf_id_80] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc219)
        %acc_86 = ttg.convert_layout %p_84 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc220)
        %acc_87 = ttng.warp_group_dot %acc_86, %acc_85, %acc_cnt_72 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc220)
        %qk_88 = ttng.warp_group_dot_wait %qk_78 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc221)
        %10 = ttg.memdesc_index %arg29[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc94)
        ttng.arrive_barrier %10, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc95)
        %m_ij_89 = "tt.reduce"(%qk_88) <{axis = 1 : i32}> ({
        ^bb0(%m_ij_107: f32 loc(callsite(#loc1 at #loc222)), %m_ij_108: f32 loc(callsite(#loc1 at #loc222))):
          %m_ij_109 = arith.maxnumf %m_ij_107, %m_ij_108 : f32 loc(#loc281)
          tt.reduce.return %m_ij_109 : f32 loc(#loc273)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc273)
        %m_ij_90 = arith.mulf %m_ij_89, %m_ij_36 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc223)
        %m_ij_91 = arith.maxnumf %m_ij_70, %m_ij_90 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc224)
        %qk_92 = arith.mulf %qk_88, %qk_39 : tensor<64x128xf32, #mma> loc(#loc225)
        %qk_93 = tt.expand_dims %m_ij_91 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc226)
        %qk_94 = tt.broadcast %qk_93 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc227)
        %qk_95 = arith.subf %qk_92, %qk_94 : tensor<64x128xf32, #mma> loc(#loc227)
        %p_96 = math.exp2 %qk_95 : tensor<64x128xf32, #mma> loc(#loc228)
        %alpha_97 = arith.subf %m_ij_70, %m_ij_91 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc229)
        %alpha_98 = math.exp2 %alpha_97 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc230)
        %l_ij_99 = "tt.reduce"(%p_96) <{axis = 1 : i32}> ({
        ^bb0(%l_ij_107: f32 loc(callsite(#loc1 at #loc231)), %l_ij_108: f32 loc(callsite(#loc1 at #loc231))):
          %l_ij_109 = arith.addf %l_ij_107, %l_ij_108 : f32 loc(#loc282)
          tt.reduce.return %l_ij_109 : f32 loc(#loc275)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc275)
        %l_i_100 = arith.mulf %l_i_71, %alpha_98 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc232)
        %l_i_101 = arith.addf %l_i_100, %l_ij_99 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc233)
        %acc_102 = ttng.warp_group_dot_wait %acc_87 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc234)
        %11 = ttg.memdesc_index %arg35[%v_buf_id_80] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc109)
        ttng.arrive_barrier %11, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc110)
        %acc_103 = tt.expand_dims %alpha_98 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc235)
        %acc_104 = tt.broadcast %acc_103 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc236)
        %acc_105 = arith.mulf %acc_102, %acc_104 : tensor<64x128xf32, #mma> loc(#loc236)
        %acc_cnt_106 = arith.addi %arg45, %c1_i32_28 : i32 loc(#loc237)
        scf.yield %m_ij_91, %l_i_101, %acc_105, %k_phase_75, %v_phase_83, %p_96, %acc_cnt_106 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64x128xf32, #mma>, i32, i32, tensor<64x128xf32, #mma>, i32 loc(#loc114)
      } loc(#loc293)
      %v_buf_id = arith.subi %acc_cnt#6, %c1_i32_28 : i32 loc(#loc238)
      %v_buf_id_48 = arith.remsi %v_buf_id, %c2_i32_30 : i32 loc(#loc239)
      %v_phase = arith.cmpi eq, %v_buf_id_48, %c0_i32_26 : i32 loc(#loc240)
      %v_phase_49 = arith.extui %v_phase : i1 to i32 loc(#loc241)
      %v_phase_50 = arith.xori %acc_cnt#4, %v_phase_49 : i32 loc(#loc241)
      %3 = ttg.memdesc_index %arg36[%v_buf_id_48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc119)
      ttng.wait_barrier %3, %v_phase_50, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc120)
      %p_51 = arith.truncf %acc_cnt#5 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc242)
      %acc_52 = ttg.memdesc_index %arg37[%v_buf_id_48] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc243)
      %acc_53 = ttg.convert_layout %p_51 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc244)
      %acc_54 = ttng.warp_group_dot %acc_53, %acc_52, %acc_cnt#2 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc244)
      %acc_55 = ttng.warp_group_dot_wait %acc_54 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc245)
      %4 = ttg.memdesc_index %arg35[%v_buf_id_48] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc125)
      ttng.arrive_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc126)
      %start_m = tt.get_program_id x : i32 loc(#loc246)
      %off_hz = tt.get_program_id y : i32 loc(#loc247)
      %off_z = arith.divsi %off_hz, %arg25 : i32 loc(#loc248)
      %off_h = arith.remsi %off_hz, %arg25 : i32 loc(#loc249)
      %offset_y = arith.muli %arg27, %arg25 : i32 loc(#loc250)
      %offset_y_56 = arith.muli %off_z, %offset_y : i32 loc(#loc251)
      %offset_y_57 = arith.muli %off_h, %arg27 : i32 loc(#loc252)
      %offset_y_58 = arith.addi %offset_y_56, %offset_y_57 : i32 loc(#loc253)
      %qo_offset_y = arith.muli %start_m, %c128_i32_29 : i32 loc(#loc254)
      %qo_offset_y_59 = arith.addi %offset_y_58, %qo_offset_y : i32 loc(#loc255)
      %m_i = math.log2 %acc_cnt#1 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc256)
      %m_i_60 = arith.addf %acc_cnt#0, %m_i : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc257)
      %acc_61 = tt.expand_dims %acc_cnt#1 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc258)
      %acc_62 = tt.broadcast %acc_61 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc259)
      %acc_63 = arith.divf %acc_55, %acc_62 : tensor<64x128xf32, #mma> loc(#loc259)
      %offs_m = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc260)
      %offs_m_64 = tt.splat %qo_offset_y : i32 -> tensor<64xi32, #blocked> loc(#loc261)
      %offs_m_65 = arith.addi %offs_m_64, %offs_m : tensor<64xi32, #blocked> loc(#loc261)
      %m_ptrs = arith.muli %off_hz, %arg27 : i32 loc(#loc262)
      %m_ptrs_66 = tt.addptr %arg26, %m_ptrs : !tt.ptr<f32>, i32 loc(#loc263)
      %m_ptrs_67 = tt.splat %m_ptrs_66 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc264)
      %m_ptrs_68 = tt.addptr %m_ptrs_67, %offs_m_65 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc264)
      %5 = ttg.convert_layout %m_i_60 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked> loc(#loc146)
      tt.store %m_ptrs_68, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc146)
      %6 = arith.truncf %acc_63 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc147)
      %7 = ttg.local_alloc %6 : (tensor<64x128xf16, #mma>) -> !ttg.memdesc<64x128xf16, #shared, #smem> loc(#loc148)
      ttng.fence_async_shared {bCluster = false} loc(#loc148)
      ttng.async_tma_copy_local_to_global %arg28[%qo_offset_y_59, %c0_i32_26] %7 : !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<64x128xf16, #shared, #smem> loc(#loc148)
      ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc148)
      ttg.warp_return loc(#loc1)
    }
    partition1(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16, #shared>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %qk = arith.constant dense<0.000000e+00> : tensor<64x128xf32, #mma> loc(#loc188)
      %cst = arith.constant 1.44269502 : f32 loc(#loc1)
      %c1_i32_26 = arith.constant 1 : i32 loc(#loc1)
      %true_27 = arith.constant true loc(#loc1)
      %c0_i32_28 = arith.constant 0 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc149)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc150)
      %c128_i32_29 = arith.constant 128 : i32 loc(#loc1)
      %c2_i32_30 = arith.constant 2 : i32 loc(#loc1)
      %c64_i32_31 = arith.constant 64 : i32 loc(#loc1)
      %acc = arith.constant dense<0.000000e+00> : tensor<64x1xf32, #mma> loc(#loc189)
      %cst_32 = arith.constant dense<0xFF800000> : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
      %qk_scale = arith.mulf %arg34, %cst : f32 loc(#loc190)
      %0 = ttg.memdesc_index %arg32[%c1_i32_26] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc49)
      ttng.wait_barrier %0, %c0_i32_28, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc50)
      %1 = ttg.memdesc_index %arg30[%c0_i32_28] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc51)
      ttng.wait_barrier %1, %c0_i32_28, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      %k_tile = ttg.memdesc_index %arg31[%c0_i32_28] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc191)
      %k_tile_33 = ttg.memdesc_trans %k_tile {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc192)
      ttng.arrive_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc149)
      ttng.wait_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc150)
      %qk_34 = ttg.memdesc_index %arg33[%c1_i32_26] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc193)
      %qk_35 = ttng.warp_group_dot %qk_34, %k_tile_33, %qk {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc188)
      %qk_36 = ttng.warp_group_dot_wait %qk_35 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc194)
      %2 = ttg.memdesc_index %arg29[%c0_i32_28] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc57)
      ttng.arrive_barrier %2, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc58)
      %m_ij = "tt.reduce"(%qk_36) <{axis = 1 : i32}> ({
      ^bb0(%m_ij_71: f32 loc(callsite(#loc1 at #loc195)), %m_ij_72: f32 loc(callsite(#loc1 at #loc195))):
        %m_ij_73 = arith.maxnumf %m_ij_71, %m_ij_72 : f32 loc(#loc278)
        tt.reduce.return %m_ij_73 : f32 loc(#loc268)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc268)
      %m_ij_37 = tt.splat %qk_scale : f32 -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc196)
      %m_ij_38 = arith.mulf %m_ij, %m_ij_37 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc196)
      %m_ij_39 = arith.maxnumf %m_ij_38, %cst_32 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc197)
      %qk_40 = tt.splat %qk_scale : f32 -> tensor<64x128xf32, #mma> loc(#loc198)
      %qk_41 = arith.mulf %qk_36, %qk_40 : tensor<64x128xf32, #mma> loc(#loc198)
      %qk_42 = tt.expand_dims %m_ij_39 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc199)
      %qk_43 = tt.broadcast %qk_42 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc200)
      %qk_44 = arith.subf %qk_41, %qk_43 : tensor<64x128xf32, #mma> loc(#loc200)
      %p = math.exp2 %qk_44 : tensor<64x128xf32, #mma> loc(#loc201)
      %alpha = arith.subf %cst_32, %m_ij_39 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc202)
      %alpha_45 = math.exp2 %alpha : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc203)
      %acc_46 = tt.expand_dims %alpha_45 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc204)
      %acc_47 = arith.mulf %acc_46, %acc : tensor<64x1xf32, #mma> loc(#loc189)
      %acc_48 = tt.broadcast %acc_47 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc189)
      %l_ij = "tt.reduce"(%p) <{axis = 1 : i32}> ({
      ^bb0(%l_ij_71: f32 loc(callsite(#loc1 at #loc205)), %l_ij_72: f32 loc(callsite(#loc1 at #loc205))):
        %l_ij_73 = arith.addf %l_ij_71, %l_ij_72 : f32 loc(#loc279)
        tt.reduce.return %l_ij_73 : f32 loc(#loc270)
      }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc270)
      %l_i = arith.addf %alpha_45, %l_ij : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc206)
      %acc_cnt:7 = scf.for %acc_cnt_71 = %c128_i32_29 to %arg27 step %c128_i32_29 iter_args(%m_ij_72 = %m_ij_39, %l_i_73 = %l_i, %acc_cnt_74 = %acc_48, %arg42 = %c0_i32_28, %arg43 = %c1_i32_26, %p_75 = %p, %arg45 = %c1_i32_26) -> (tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64x128xf32, #mma>, i32, i32, tensor<64x128xf32, #mma>, i32)  : i32 {
        %k_buf_id = arith.remsi %arg45, %c2_i32_30 : i32 loc(#loc208)
        %k_phase = arith.cmpi eq, %k_buf_id, %c0_i32_28 : i32 loc(#loc209)
        %k_phase_76 = arith.extui %k_phase : i1 to i32 loc(#loc210)
        %k_phase_77 = arith.xori %arg42, %k_phase_76 : i32 loc(#loc210)
        %8 = ttg.memdesc_index %arg30[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc79)
        ttng.wait_barrier %8, %k_phase_77, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc80)
        %k_tile_78 = ttg.memdesc_index %arg31[%k_buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc211)
        %k_tile_79 = ttg.memdesc_trans %k_tile_78 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc212)
        %qk_80 = ttng.warp_group_dot %qk_34, %k_tile_79, %qk {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc213)
        %v_buf_id_81 = arith.subi %arg45, %c1_i32_26 : i32 loc(#loc214)
        %v_buf_id_82 = arith.remsi %v_buf_id_81, %c2_i32_30 : i32 loc(#loc215)
        %v_phase_83 = arith.cmpi eq, %v_buf_id_82, %c0_i32_28 : i32 loc(#loc216)
        %v_phase_84 = arith.extui %v_phase_83 : i1 to i32 loc(#loc217)
        %v_phase_85 = arith.xori %arg43, %v_phase_84 : i32 loc(#loc217)
        %9 = ttg.memdesc_index %arg36[%v_buf_id_82] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc88)
        ttng.wait_barrier %9, %v_phase_85, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc89)
        %p_86 = arith.truncf %p_75 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc218)
        %acc_87 = ttg.memdesc_index %arg37[%v_buf_id_82] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc219)
        %acc_88 = ttg.convert_layout %p_86 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc220)
        %acc_89 = ttng.warp_group_dot %acc_88, %acc_87, %acc_cnt_74 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc220)
        %qk_90 = ttng.warp_group_dot_wait %qk_80 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc221)
        %10 = ttg.memdesc_index %arg29[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc94)
        ttng.arrive_barrier %10, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc95)
        %m_ij_91 = "tt.reduce"(%qk_90) <{axis = 1 : i32}> ({
        ^bb0(%m_ij_109: f32 loc(callsite(#loc1 at #loc222)), %m_ij_110: f32 loc(callsite(#loc1 at #loc222))):
          %m_ij_111 = arith.maxnumf %m_ij_109, %m_ij_110 : f32 loc(#loc281)
          tt.reduce.return %m_ij_111 : f32 loc(#loc273)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc273)
        %m_ij_92 = arith.mulf %m_ij_91, %m_ij_37 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc223)
        %m_ij_93 = arith.maxnumf %m_ij_72, %m_ij_92 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc224)
        %qk_94 = arith.mulf %qk_90, %qk_40 : tensor<64x128xf32, #mma> loc(#loc225)
        %qk_95 = tt.expand_dims %m_ij_93 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc226)
        %qk_96 = tt.broadcast %qk_95 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc227)
        %qk_97 = arith.subf %qk_94, %qk_96 : tensor<64x128xf32, #mma> loc(#loc227)
        %p_98 = math.exp2 %qk_97 : tensor<64x128xf32, #mma> loc(#loc228)
        %alpha_99 = arith.subf %m_ij_72, %m_ij_93 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc229)
        %alpha_100 = math.exp2 %alpha_99 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc230)
        %l_ij_101 = "tt.reduce"(%p_98) <{axis = 1 : i32}> ({
        ^bb0(%l_ij_109: f32 loc(callsite(#loc1 at #loc231)), %l_ij_110: f32 loc(callsite(#loc1 at #loc231))):
          %l_ij_111 = arith.addf %l_ij_109, %l_ij_110 : f32 loc(#loc282)
          tt.reduce.return %l_ij_111 : f32 loc(#loc275)
        }) : (tensor<64x128xf32, #mma>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc275)
        %l_i_102 = arith.mulf %l_i_73, %alpha_100 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc232)
        %l_i_103 = arith.addf %l_i_102, %l_ij_101 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc233)
        %acc_104 = ttng.warp_group_dot_wait %acc_89 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc234)
        %11 = ttg.memdesc_index %arg35[%v_buf_id_82] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc109)
        ttng.arrive_barrier %11, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc110)
        %acc_105 = tt.expand_dims %alpha_100 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc235)
        %acc_106 = tt.broadcast %acc_105 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc236)
        %acc_107 = arith.mulf %acc_104, %acc_106 : tensor<64x128xf32, #mma> loc(#loc236)
        %acc_cnt_108 = arith.addi %arg45, %c1_i32_26 : i32 loc(#loc237)
        scf.yield %m_ij_93, %l_i_103, %acc_107, %k_phase_77, %v_phase_85, %p_98, %acc_cnt_108 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<64x128xf32, #mma>, i32, i32, tensor<64x128xf32, #mma>, i32 loc(#loc114)
      } loc(#loc293)
      %v_buf_id = arith.subi %acc_cnt#6, %c1_i32_26 : i32 loc(#loc238)
      %v_buf_id_49 = arith.remsi %v_buf_id, %c2_i32_30 : i32 loc(#loc239)
      %v_phase = arith.cmpi eq, %v_buf_id_49, %c0_i32_28 : i32 loc(#loc240)
      %v_phase_50 = arith.extui %v_phase : i1 to i32 loc(#loc241)
      %v_phase_51 = arith.xori %acc_cnt#4, %v_phase_50 : i32 loc(#loc241)
      %3 = ttg.memdesc_index %arg36[%v_buf_id_49] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc119)
      ttng.wait_barrier %3, %v_phase_51, %true_27 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc120)
      %p_52 = arith.truncf %acc_cnt#5 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc242)
      %acc_53 = ttg.memdesc_index %arg37[%v_buf_id_49] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc243)
      %acc_54 = ttg.convert_layout %p_52 : tensor<64x128xf16, #mma> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc244)
      %acc_55 = ttng.warp_group_dot %acc_54, %acc_53, %acc_cnt#2 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc244)
      %acc_56 = ttng.warp_group_dot_wait %acc_55 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc245)
      %4 = ttg.memdesc_index %arg35[%v_buf_id_49] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc125)
      ttng.arrive_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc126)
      %start_m = tt.get_program_id x : i32 loc(#loc246)
      %off_hz = tt.get_program_id y : i32 loc(#loc247)
      %off_z = arith.divsi %off_hz, %arg25 : i32 loc(#loc248)
      %off_h = arith.remsi %off_hz, %arg25 : i32 loc(#loc249)
      %offset_y = arith.muli %arg27, %arg25 : i32 loc(#loc250)
      %offset_y_57 = arith.muli %off_z, %offset_y : i32 loc(#loc251)
      %offset_y_58 = arith.muli %off_h, %arg27 : i32 loc(#loc252)
      %offset_y_59 = arith.addi %offset_y_57, %offset_y_58 : i32 loc(#loc253)
      %qo_offset_y = arith.muli %start_m, %c128_i32_29 : i32 loc(#loc254)
      %qo_offset_y_60 = arith.addi %offset_y_59, %qo_offset_y : i32 loc(#loc255)
      %qo_offset_y_split = arith.addi %qo_offset_y_60, %c64_i32_31 : i32 loc(#loc265)
      %m_i = math.log2 %acc_cnt#1 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc256)
      %m_i_61 = arith.addf %acc_cnt#0, %m_i : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc257)
      %acc_62 = tt.expand_dims %acc_cnt#1 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xf32, #mma> loc(#loc258)
      %acc_63 = tt.broadcast %acc_62 : tensor<64x1xf32, #mma> -> tensor<64x128xf32, #mma> loc(#loc259)
      %acc_64 = arith.divf %acc_56, %acc_63 : tensor<64x128xf32, #mma> loc(#loc259)
      %offs_m = arith.addi %qo_offset_y, %c64_i32_31 : i32 loc(#loc266)
      %offs_m_65 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc260)
      %offs_m_66 = tt.splat %offs_m : i32 -> tensor<64xi32, #blocked> loc(#loc261)
      %offs_m_67 = arith.addi %offs_m_66, %offs_m_65 : tensor<64xi32, #blocked> loc(#loc261)
      %m_ptrs = arith.muli %off_hz, %arg27 : i32 loc(#loc262)
      %m_ptrs_68 = tt.addptr %arg26, %m_ptrs : !tt.ptr<f32>, i32 loc(#loc263)
      %m_ptrs_69 = tt.splat %m_ptrs_68 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc264)
      %m_ptrs_70 = tt.addptr %m_ptrs_69, %offs_m_67 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc264)
      %5 = ttg.convert_layout %m_i_61 : tensor<64xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64xf32, #blocked> loc(#loc146)
      tt.store %m_ptrs_70, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc146)
      %6 = arith.truncf %acc_64 : tensor<64x128xf32, #mma> to tensor<64x128xf16, #mma> loc(#loc147)
      %7 = ttg.local_alloc %6 : (tensor<64x128xf16, #mma>) -> !ttg.memdesc<64x128xf16, #shared, #smem> loc(#loc148)
      ttng.fence_async_shared {bCluster = false} loc(#loc148)
      ttng.async_tma_copy_local_to_global %arg28[%qo_offset_y_split, %c0_i32_28] %7 : !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<64x128xf16, #shared, #smem> loc(#loc148)
      ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc148)
      ttg.warp_return loc(#loc1)
    } : (i32, !tt.ptr<f32>, i32, !tt.tensordesc<tensor<64x128xf16, #shared>>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable>, f32, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>) -> () loc(#loc10)
    ttng.inval_barrier %q_fulls_16 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %q_fulls_17 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %k_empties_18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %k_empties_19 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %k_fulls_20 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %k_fulls_21 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %v_empties_22 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %v_empties_23 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %v_fulls_24 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    ttng.inval_barrier %v_fulls_25 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc153)
    tt.return loc(#loc153)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":54:79)
#loc3 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":55:73)
#loc4 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":56:73)
#loc5 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":59:62)
#loc6 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":60:61)
#loc7 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":61:59)
#loc8 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":62:61)
#loc9 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":63:59)
#loc10 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:9)
#loc11 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":69:36)
#loc12 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":70:35)
#loc13 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":71:30)
#loc14 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":72:29)
#loc15 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:40)
#loc16 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:32)
#loc17 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:53)
#loc18 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:45)
#loc19 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:47)
#loc20 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:37)
#loc21 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:55)
#loc22 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:58)
#loc23 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:88)
#loc24 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:50)
#loc25 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":87:38)
#loc26 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":88:35)
#loc27 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:49)
#loc28 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:39)
#loc29 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:43)
#loc30 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:52)
#loc31 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:49)
#loc32 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:58)
#loc33 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:58)
#loc34 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:85)
#loc35 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:43)
#loc36 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:52)
#loc37 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:49)
#loc38 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:58)
#loc39 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:58)
#loc40 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:85)
#loc41 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":104:31)
#loc42 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:27)
#loc43 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:16)
#loc44 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:45)
#loc45 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":136:42)
#loc46 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":147:45)
#loc47 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:24)
#loc48 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":116:24)
#loc49 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:37)
#loc50 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:43)
#loc51 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:37)
#loc52 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:48)
#loc53 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:45)
#loc54 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:37)
#loc55 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:39)
#loc56 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":150:39)
#loc57 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:41)
#loc58 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:52)
#loc59 = loc("/root/triton/python/triton/language/standard.py":189:40)
#loc61 = loc("/root/triton/python/triton/language/standard.py":168:27)
#loc62 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:51)
#loc63 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:35)
#loc64 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:22)
#loc65 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:38)
#loc66 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:33)
#loc67 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":157:29)
#loc68 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:39)
#loc69 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:33)
#loc70 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:30)
#loc71 = loc("/root/triton/python/triton/language/standard.py":301:36)
#loc73 = loc("/root/triton/python/triton/language/standard.py":261:15)
#loc74 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":163:32)
#loc75 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":168:48)
#loc76 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":169:37)
#loc77 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:49)
#loc78 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:37)
#loc79 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:41)
#loc80 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:52)
#loc81 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:49)
#loc82 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:41)
#loc83 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":178:49)
#loc84 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:38)
#loc85 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:43)
#loc86 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:49)
#loc87 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:37)
#loc88 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:41)
#loc89 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:52)
#loc90 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":186:25)
#loc91 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:47)
#loc92 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:58)
#loc93 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":190:43)
#loc94 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:45)
#loc95 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:56)
#loc97 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:55)
#loc98 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:39)
#loc99 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:26)
#loc100 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:42)
#loc101 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:37)
#loc102 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":197:33)
#loc103 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:43)
#loc104 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:37)
#loc106 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:28)
#loc107 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:36)
#loc108 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":207:44)
#loc109 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:45)
#loc110 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:56)
#loc111 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:34)
#loc112 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:28)
#loc113 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:27)
#loc114 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:16)
#loc115 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:34)
#loc116 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:39)
#loc117 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:45)
#loc118 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:33)
#loc119 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:37)
#loc120 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:48)
#loc121 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":219:21)
#loc122 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:43)
#loc123 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:54)
#loc124 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":222:40)
#loc125 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:41)
#loc126 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:52)
#loc127 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":227:36)
#loc128 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":228:35)
#loc129 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":229:30)
#loc130 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":230:29)
#loc131 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:40)
#loc132 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:32)
#loc133 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:53)
#loc134 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:45)
#loc135 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:47)
#loc136 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:37)
#loc137 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:32)
#loc138 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:19)
#loc139 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:28)
#loc140 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:24)
#loc141 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:76)
#loc142 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:63)
#loc143 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:34)
#loc144 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:25)
#loc145 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:42)
#loc146 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":238:29)
#loc147 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:56)
#loc148 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:49)
#loc149 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":139:44)
#loc150 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":141:43)
#loc151 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":233:46)
#loc152 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:41)
#loc153 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:4)
#loc163 = loc("q_tiles"(#loc2))
#loc164 = loc("k_tiles"(#loc3))
#loc165 = loc("v_tiles"(#loc4))
#loc166 = loc("q_fulls"(#loc5))
#loc167 = loc("k_empties"(#loc6))
#loc168 = loc("k_fulls"(#loc7))
#loc169 = loc("v_empties"(#loc8))
#loc170 = loc("v_fulls"(#loc9))
#loc171 = loc("start_m"(#loc11))
#loc172 = loc("off_hz"(#loc12))
#loc173 = loc("off_z"(#loc13))
#loc174 = loc("off_h"(#loc14))
#loc175 = loc("offset_y"(#loc15))
#loc176 = loc("offset_y"(#loc16))
#loc177 = loc("offset_y"(#loc17))
#loc178 = loc("offset_y"(#loc18))
#loc179 = loc("qo_offset_y"(#loc19))
#loc180 = loc("qo_offset_y"(#loc20))
#loc181 = loc("qo_offset_y_split"(#loc24))
#loc182 = loc("kv_offset_y"(#loc25))
#loc183 = loc("buf_id"(#loc26))
#loc184 = loc("kv_phase"(#loc27))
#loc185 = loc("kv_phase"(#loc28))
#loc186 = loc("kv_offset_y"(#loc41))
#loc187 = loc("acc_cnt"(#loc42))
#loc188 = loc("qk"(#loc44))
#loc189 = loc("acc"(#loc47))
#loc190 = loc("qk_scale"(#loc48))
#loc191 = loc("k_tile"(#loc53))
#loc192 = loc("k_tile"(#loc54))
#loc193 = loc("qk"(#loc55))
#loc194 = loc("qk"(#loc56))
#loc196 = loc("m_ij"(#loc62))
#loc197 = loc("m_ij"(#loc63))
#loc198 = loc("qk"(#loc64))
#loc199 = loc("qk"(#loc65))
#loc200 = loc("qk"(#loc66))
#loc201 = loc("p"(#loc67))
#loc202 = loc("alpha"(#loc68))
#loc203 = loc("alpha"(#loc69))
#loc204 = loc("acc"(#loc70))
#loc206 = loc("l_i"(#loc74))
#loc207 = loc("m_i"(#loc75))
#loc208 = loc("k_buf_id"(#loc76))
#loc209 = loc("k_phase"(#loc77))
#loc210 = loc("k_phase"(#loc78))
#loc211 = loc("k_tile"(#loc81))
#loc212 = loc("k_tile"(#loc82))
#loc213 = loc("qk"(#loc83))
#loc214 = loc("v_buf_id"(#loc84))
#loc215 = loc("v_buf_id"(#loc85))
#loc216 = loc("v_phase"(#loc86))
#loc217 = loc("v_phase"(#loc87))
#loc218 = loc("p"(#loc90))
#loc219 = loc("acc"(#loc91))
#loc220 = loc("acc"(#loc92))
#loc221 = loc("qk"(#loc93))
#loc223 = loc("m_ij"(#loc97))
#loc224 = loc("m_ij"(#loc98))
#loc225 = loc("qk"(#loc99))
#loc226 = loc("qk"(#loc100))
#loc227 = loc("qk"(#loc101))
#loc228 = loc("p"(#loc102))
#loc229 = loc("alpha"(#loc103))
#loc230 = loc("alpha"(#loc104))
#loc232 = loc("l_i"(#loc106))
#loc233 = loc("l_i"(#loc107))
#loc234 = loc("acc"(#loc108))
#loc235 = loc("acc"(#loc111))
#loc236 = loc("acc"(#loc112))
#loc237 = loc("acc_cnt"(#loc113))
#loc238 = loc("v_buf_id"(#loc115))
#loc239 = loc("v_buf_id"(#loc116))
#loc240 = loc("v_phase"(#loc117))
#loc241 = loc("v_phase"(#loc118))
#loc242 = loc("p"(#loc121))
#loc243 = loc("acc"(#loc122))
#loc244 = loc("acc"(#loc123))
#loc245 = loc("acc"(#loc124))
#loc246 = loc("start_m"(#loc127))
#loc247 = loc("off_hz"(#loc128))
#loc248 = loc("off_z"(#loc129))
#loc249 = loc("off_h"(#loc130))
#loc250 = loc("offset_y"(#loc131))
#loc251 = loc("offset_y"(#loc132))
#loc252 = loc("offset_y"(#loc133))
#loc253 = loc("offset_y"(#loc134))
#loc254 = loc("qo_offset_y"(#loc135))
#loc255 = loc("qo_offset_y"(#loc136))
#loc256 = loc("m_i"(#loc137))
#loc257 = loc("m_i"(#loc138))
#loc258 = loc("acc"(#loc139))
#loc259 = loc("acc"(#loc140))
#loc260 = loc("offs_m"(#loc141))
#loc261 = loc("offs_m"(#loc142))
#loc262 = loc("m_ptrs"(#loc143))
#loc263 = loc("m_ptrs"(#loc144))
#loc264 = loc("m_ptrs"(#loc145))
#loc265 = loc("qo_offset_y_split"(#loc151))
#loc266 = loc("offs_m"(#loc152))
#loc267 = loc("kv_phase"(#loc182))
#loc268 = loc(callsite(#loc59 at #loc195))
#loc270 = loc(callsite(#loc71 at #loc205))
#loc272 = loc("l_i"(#loc207))
#loc273 = loc(callsite(#loc59 at #loc222))
#loc275 = loc(callsite(#loc71 at #loc231))
#loc277 = loc("acc_cnt"(#loc267))
#loc278 = loc(callsite(#loc61 at #loc268))
#loc279 = loc(callsite(#loc73 at #loc270))
#loc280 = loc("acc"(#loc272))
#loc281 = loc(callsite(#loc61 at #loc273))
#loc282 = loc(callsite(#loc73 at #loc275))
#loc283 = loc("k_phase"(#loc280))
#loc284 = loc("v_phase"(#loc283))
#loc285 = loc("k_buf_id"(#loc284))
#loc286 = loc("v_buf_id"(#loc285))
#loc287 = loc("k_tile"(#loc286))
#loc288 = loc("qk"(#loc287))
#loc289 = loc("m_ij"(#loc288))
#loc290 = loc("p"(#loc289))
#loc291 = loc("alpha"(#loc290))
#loc292 = loc("l_ij"(#loc291))
#loc293 = loc("acc_cnt"(#loc292))
