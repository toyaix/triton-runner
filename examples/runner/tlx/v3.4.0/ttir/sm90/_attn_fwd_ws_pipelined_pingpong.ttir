#loc = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":40:0)
#loc1 = loc(unknown)
#loc64 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:46)
#loc76 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":162:29)
#loc100 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:50)
#loc109 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":200:33)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 128, 16]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared2 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = true, elementBitWidth = 16}>
#smem = #ttg.shared_memory
#loc158 = loc("sm_scale"(#loc))
#loc159 = loc("M"(#loc))
#loc160 = loc("Z"(#loc))
#loc161 = loc("H"(#loc))
#loc162 = loc("desc_q"(#loc))
#loc163 = loc("desc_k"(#loc))
#loc164 = loc("desc_v"(#loc))
#loc165 = loc("desc_o"(#loc))
#loc166 = loc("N_CTX"(#loc))
#loc201 = loc("m_ij"(#loc64))
#loc211 = loc("l_ij"(#loc76))
#loc228 = loc("m_ij"(#loc100))
#loc237 = loc("l_ij"(#loc109))
#loc275 = loc(callsite(#loc1 at #loc201))
#loc277 = loc(callsite(#loc1 at #loc211))
#loc280 = loc(callsite(#loc1 at #loc228))
#loc282 = loc(callsite(#loc1 at #loc237))
module attributes {tlx.has_explicit_local_mem_access = true, tlx.has_tlx_ops = true, tlx.has_warp_spec_ops = true, "ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @_attn_fwd_ws_pipelined_pingpong(%sm_scale: f32 loc("sm_scale"(#loc)), %M: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("M"(#loc)), %Z: i32 loc("Z"(#loc)), %H: i32 {tt.divisibility = 16 : i32} loc("H"(#loc)), %desc_q: !tt.tensordesc<tensor<64x128xf16>> loc("desc_q"(#loc)), %desc_q_0: i32 loc("desc_q"(#loc)), %desc_q_1: i32 loc("desc_q"(#loc)), %desc_q_2: i64 loc("desc_q"(#loc)), %desc_q_3: i64 loc("desc_q"(#loc)), %desc_k: !tt.tensordesc<tensor<128x128xf16>> loc("desc_k"(#loc)), %desc_k_4: i32 loc("desc_k"(#loc)), %desc_k_5: i32 loc("desc_k"(#loc)), %desc_k_6: i64 loc("desc_k"(#loc)), %desc_k_7: i64 loc("desc_k"(#loc)), %desc_v: !tt.tensordesc<tensor<128x128xf16>> loc("desc_v"(#loc)), %desc_v_8: i32 loc("desc_v"(#loc)), %desc_v_9: i32 loc("desc_v"(#loc)), %desc_v_10: i64 loc("desc_v"(#loc)), %desc_v_11: i64 loc("desc_v"(#loc)), %desc_o: !tt.tensordesc<tensor<64x128xf16>> loc("desc_o"(#loc)), %desc_o_12: i32 loc("desc_o"(#loc)), %desc_o_13: i32 loc("desc_o"(#loc)), %desc_o_14: i64 loc("desc_o"(#loc)), %desc_o_15: i64 loc("desc_o"(#loc)), %N_CTX: i32 {tt.divisibility = 16 : i32} loc("N_CTX"(#loc))) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %q_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(#loc167)
    %k_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc168)
    %v_tiles = ttg.local_alloc : () -> !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(#loc169)
    %q_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc170)
    %q_fulls_16 = ttg.memdesc_index %q_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    ttng.init_barrier %q_fulls_16, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    %q_fulls_17 = ttg.memdesc_index %q_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    ttng.init_barrier %q_fulls_17, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc170)
    %k_empties = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc171)
    %k_empties_18 = ttg.memdesc_index %k_empties[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc171)
    ttng.init_barrier %k_empties_18, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc171)
    %k_empties_19 = ttg.memdesc_index %k_empties[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc171)
    ttng.init_barrier %k_empties_19, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc171)
    %k_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc172)
    %k_fulls_20 = ttg.memdesc_index %k_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc172)
    ttng.init_barrier %k_fulls_20, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc172)
    %k_fulls_21 = ttg.memdesc_index %k_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc172)
    ttng.init_barrier %k_fulls_21, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc172)
    %v_empties = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc173)
    %v_empties_22 = ttg.memdesc_index %v_empties[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc173)
    ttng.init_barrier %v_empties_22, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc173)
    %v_empties_23 = ttg.memdesc_index %v_empties[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc173)
    ttng.init_barrier %v_empties_23, 2 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc173)
    %v_fulls = ttg.local_alloc : () -> !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(#loc174)
    %v_fulls_24 = ttg.memdesc_index %v_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc174)
    ttng.init_barrier %v_fulls_24, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc174)
    %v_fulls_25 = ttg.memdesc_index %v_fulls[%c1_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc174)
    ttng.init_barrier %v_fulls_25, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc174)
    ttg.warp_specialize(%H, %M, %N_CTX, %desc_o, %k_empties, %k_fulls, %k_tiles, %q_fulls, %q_tiles, %sm_scale, %v_empties, %v_fulls, %v_tiles) attributes {requestedRegisters = array<i32: 232, 232>}
    default {
      %start_m = tt.get_program_id x : i32 loc(#loc175)
      %off_hz = tt.get_program_id y : i32 loc(#loc176)
      %off_z = arith.divsi %off_hz, %H : i32 loc(#loc177)
      %off_h = arith.remsi %off_hz, %H : i32 loc(#loc178)
      %offset_y = arith.muli %N_CTX, %H : i32 loc(#loc179)
      %offset_y_26 = arith.muli %off_z, %offset_y : i32 loc(#loc180)
      %offset_y_27 = arith.muli %off_h, %N_CTX : i32 loc(#loc181)
      %offset_y_28 = arith.addi %offset_y_26, %offset_y_27 : i32 loc(#loc182)
      %qo_offset_y = arith.muli %start_m, %c128_i32 : i32 loc(#loc183)
      %qo_offset_y_29 = arith.addi %offset_y_28, %qo_offset_y : i32 loc(#loc184)
      %c2_i32_30 = arith.constant 2 : i32 loc(#loc21)
      %0 = ttg.memdesc_index %q_fulls[%c0_i32] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc22)
      ttng.barrier_expect %0, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc23)
      %qo_offset_y_split = arith.muli %c0_i32, %c64_i32 : i32 loc(#loc185)
      %qo_offset_y_split_31 = arith.addi %qo_offset_y_29, %qo_offset_y_split : i32 loc(#loc186)
      %1 = ttg.memdesc_index %q_tiles[%c0_i32] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc26)
      ttng.async_tma_copy_global_to_local %desc_q[%qo_offset_y_split_31, %c0_i32] %1, %0, %true : !tt.tensordesc<tensor<64x128xf16>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc27)
      %c1_i32_32 = arith.constant 1 : i32 loc(#loc21)
      %2 = arith.muli %c1_i32, %c1_i32_32 : i32 loc(#loc21)
      %3 = arith.addi %c0_i32, %2 : i32 loc(#loc21)
      %4 = ttg.memdesc_index %q_fulls[%3] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc22)
      ttng.barrier_expect %4, 16384, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc23)
      %qo_offset_y_split_33 = arith.muli %3, %c64_i32 : i32 loc(#loc185)
      %qo_offset_y_split_34 = arith.addi %qo_offset_y_29, %qo_offset_y_split_33 : i32 loc(#loc186)
      %5 = ttg.memdesc_index %q_tiles[%3] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc26)
      ttng.async_tma_copy_global_to_local %desc_q[%qo_offset_y_split_34, %c0_i32] %5, %4, %true : !tt.tensordesc<tensor<64x128xf16>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc27)
      %acc_cnt:3 = scf.for %_ = %c0_i32 to %N_CTX step %c128_i32 iter_args(%kv_offset_y = %offset_y_28, %kv_phase = %c0_i32, %acc_cnt_35 = %c0_i32) -> (i32, i32, i32)  : i32 {
        %buf_id = arith.remsi %acc_cnt_35, %c2_i32 : i32 loc(#loc188)
        %kv_phase_36 = arith.cmpi eq, %buf_id, %c0_i32 : i32 loc(#loc189)
        %kv_phase_37 = arith.extui %kv_phase_36 : i1 to i32 loc(#loc190)
        %kv_phase_38 = arith.xori %kv_phase, %kv_phase_37 : i32 loc(#loc190)
        %6 = ttg.memdesc_index %k_empties[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc32)
        ttng.wait_barrier %6, %kv_phase_38, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc33)
        %7 = ttg.memdesc_index %k_fulls[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc34)
        ttng.barrier_expect %7, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc35)
        %8 = ttg.memdesc_index %k_tiles[%buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc36)
        ttng.async_tma_copy_global_to_local %desc_k[%kv_offset_y, %c0_i32] %8, %7, %true : !tt.tensordesc<tensor<128x128xf16>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc37)
        %9 = ttg.memdesc_index %v_empties[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc38)
        ttng.wait_barrier %9, %kv_phase_38, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc39)
        %10 = ttg.memdesc_index %v_fulls[%buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc40)
        ttng.barrier_expect %10, 32768, %true : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc41)
        %11 = ttg.memdesc_index %v_tiles[%buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc42)
        ttng.async_tma_copy_global_to_local %desc_v[%kv_offset_y, %c0_i32] %11, %10, %true : !tt.tensordesc<tensor<128x128xf16>>, !ttg.memdesc<1xi64, #shared1, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc43)
        %kv_offset_y_39 = arith.addi %kv_offset_y, %c128_i32 : i32 loc(#loc191)
        %acc_cnt_40 = arith.addi %acc_cnt_35, %c1_i32 : i32 loc(#loc192)
        scf.yield %kv_offset_y_39, %kv_phase_38, %acc_cnt_40 : i32, i32, i32 loc(#loc46)
      } loc(#loc283)
      ttg.warp_yield loc(#loc1)
    }
    partition0(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %acc = arith.constant dense<0.000000e+00> : tensor<64x1xf32> loc(#loc193)
      %c2_i32_26 = arith.constant 2 : i32 loc(#loc1)
      %c128_i32_27 = arith.constant 128 : i32 loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc48)
      %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc1)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc49)
      %c1_i32_28 = arith.constant 1 : i32 loc(#loc1)
      %true_29 = arith.constant true loc(#loc1)
      %c0_i32_30 = arith.constant 0 : i32 loc(#loc1)
      %cst_31 = arith.constant 1.44269502 : f32 loc(#loc1)
      %m_i = arith.constant dense<0xFF800000> : tensor<64xf32> loc(#loc194)
      %qk_scale = arith.mulf %arg34, %cst_31 : f32 loc(#loc195)
      %0 = ttg.memdesc_index %arg32[%c0_i32_30] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      ttng.wait_barrier %0, %c0_i32_30, %true_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc53)
      %1 = ttg.memdesc_index %arg30[%c0_i32_30] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc54)
      ttng.wait_barrier %1, %c0_i32_30, %true_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc55)
      %k_tile = ttg.memdesc_index %arg31[%c0_i32_30] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc196)
      %k_tile_32 = ttg.memdesc_trans %k_tile {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc197)
      ttng.wait_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc49)
      %qk = ttg.memdesc_index %arg33[%c0_i32_30] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc198)
      %qk_33 = tlx.require_layout %cst : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc199)
      %qk_34 = ttng.warp_group_dot %qk, %k_tile_32, %qk_33 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc199)
      ttng.arrive_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc48)
      %qk_35 = ttng.warp_group_dot_wait %qk_34 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc200)
      %qk_36 = tlx.release_layout %qk_35 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc199)
      %2 = ttg.memdesc_index %arg29[%c0_i32_30] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc61)
      ttng.arrive_barrier %2, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc62)
      %m_ij = "tt.reduce"(%qk_36) <{axis = 1 : i32}> ({
      ^bb0(%m_ij_73: f32 loc(callsite(#loc1 at #loc201)), %m_ij_74: f32 loc(callsite(#loc1 at #loc201))):
        %m_ij_75 = arith.maxnumf %m_ij_73, %m_ij_74 : f32 loc(#loc284)
        tt.reduce.return %m_ij_75 : f32 loc(#loc274)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc274)
      %m_ij_37 = tt.splat %qk_scale : f32 -> tensor<64xf32> loc(#loc202)
      %m_ij_38 = arith.mulf %m_ij, %m_ij_37 : tensor<64xf32> loc(#loc202)
      %m_ij_39 = arith.maxnumf %m_ij_38, %m_i : tensor<64xf32> loc(#loc203)
      %qk_40 = tt.splat %qk_scale : f32 -> tensor<64x128xf32> loc(#loc204)
      %qk_41 = arith.mulf %qk_36, %qk_40 : tensor<64x128xf32> loc(#loc204)
      %qk_42 = tt.expand_dims %m_ij_39 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc205)
      %qk_43 = tt.broadcast %qk_42 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc206)
      %qk_44 = arith.subf %qk_41, %qk_43 : tensor<64x128xf32> loc(#loc206)
      %p = math.exp2 %qk_44 : tensor<64x128xf32> loc(#loc207)
      %alpha = arith.subf %m_i, %m_ij_39 : tensor<64xf32> loc(#loc208)
      %alpha_45 = math.exp2 %alpha : tensor<64xf32> loc(#loc209)
      %acc_46 = tt.expand_dims %alpha_45 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc210)
      %acc_47 = arith.mulf %acc_46, %acc : tensor<64x1xf32> loc(#loc193)
      %acc_48 = tt.broadcast %acc_47 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc193)
      %l_ij = "tt.reduce"(%p) <{axis = 1 : i32}> ({
      ^bb0(%l_ij_73: f32 loc(callsite(#loc1 at #loc211)), %l_ij_74: f32 loc(callsite(#loc1 at #loc211))):
        %l_ij_75 = arith.addf %l_ij_73, %l_ij_74 : f32 loc(#loc285)
        tt.reduce.return %l_ij_75 : f32 loc(#loc276)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc276)
      %l_i = arith.addf %alpha_45, %l_ij : tensor<64xf32> loc(#loc212)
      %acc_cnt:7 = scf.for %acc_cnt_73 = %c128_i32_27 to %arg27 step %c128_i32_27 iter_args(%m_ij_74 = %m_ij_39, %l_i_75 = %l_i, %acc_76 = %acc_48, %arg42 = %c0_i32_30, %arg43 = %c1_i32_28, %p_77 = %p, %arg45 = %c1_i32_28) -> (tensor<64xf32>, tensor<64xf32>, tensor<64x128xf32>, i32, i32, tensor<64x128xf32>, i32)  : i32 {
        %k_buf_id = arith.remsi %arg45, %c2_i32_26 : i32 loc(#loc214)
        %k_phase = arith.cmpi eq, %k_buf_id, %c0_i32_30 : i32 loc(#loc215)
        %k_phase_78 = arith.extui %k_phase : i1 to i32 loc(#loc216)
        %k_phase_79 = arith.xori %arg42, %k_phase_78 : i32 loc(#loc216)
        %6 = ttg.memdesc_index %arg30[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc83)
        ttng.wait_barrier %6, %k_phase_79, %true_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc84)
        %k_tile_80 = ttg.memdesc_index %arg31[%k_buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc217)
        %k_tile_81 = ttg.memdesc_trans %k_tile_80 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc218)
        %qk_82 = ttng.warp_group_dot %qk, %k_tile_81, %qk_33 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc219)
        %v_buf_id_83 = arith.subi %arg45, %c1_i32_28 : i32 loc(#loc220)
        %v_buf_id_84 = arith.remsi %v_buf_id_83, %c2_i32_26 : i32 loc(#loc221)
        %v_phase_85 = arith.cmpi eq, %v_buf_id_84, %c0_i32_30 : i32 loc(#loc222)
        %v_phase_86 = arith.extui %v_phase_85 : i1 to i32 loc(#loc223)
        %v_phase_87 = arith.xori %arg43, %v_phase_86 : i32 loc(#loc223)
        %7 = ttg.memdesc_index %arg36[%v_buf_id_84] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc92)
        ttng.wait_barrier %7, %v_phase_87, %true_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc93)
        %p_88 = arith.truncf %p_77 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc224)
        %acc_89 = ttg.memdesc_index %arg37[%v_buf_id_84] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc225)
        %acc_90 = tlx.require_layout %acc_76 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc226)
        %acc_91 = tlx.require_layout %p_88 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc226)
        %acc_92 = ttng.warp_group_dot %acc_91, %acc_89, %acc_90 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc226)
        %qk_93 = ttng.warp_group_dot_wait %qk_82 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc227)
        %qk_94 = tlx.release_layout %qk_93 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc219)
        %8 = ttg.memdesc_index %arg29[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc98)
        ttng.arrive_barrier %8, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc99)
        %m_ij_95 = "tt.reduce"(%qk_94) <{axis = 1 : i32}> ({
        ^bb0(%m_ij_114: f32 loc(callsite(#loc1 at #loc228)), %m_ij_115: f32 loc(callsite(#loc1 at #loc228))):
          %m_ij_116 = arith.maxnumf %m_ij_114, %m_ij_115 : f32 loc(#loc287)
          tt.reduce.return %m_ij_116 : f32 loc(#loc279)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc279)
        %m_ij_96 = arith.mulf %m_ij_95, %m_ij_37 : tensor<64xf32> loc(#loc229)
        %m_ij_97 = arith.maxnumf %m_ij_74, %m_ij_96 : tensor<64xf32> loc(#loc230)
        %qk_98 = arith.mulf %qk_94, %qk_40 : tensor<64x128xf32> loc(#loc231)
        %qk_99 = tt.expand_dims %m_ij_97 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc232)
        %qk_100 = tt.broadcast %qk_99 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc233)
        %qk_101 = arith.subf %qk_98, %qk_100 : tensor<64x128xf32> loc(#loc233)
        %p_102 = math.exp2 %qk_101 : tensor<64x128xf32> loc(#loc234)
        %alpha_103 = arith.subf %m_ij_74, %m_ij_97 : tensor<64xf32> loc(#loc235)
        %alpha_104 = math.exp2 %alpha_103 : tensor<64xf32> loc(#loc236)
        %l_ij_105 = "tt.reduce"(%p_102) <{axis = 1 : i32}> ({
        ^bb0(%l_ij_114: f32 loc(callsite(#loc1 at #loc237)), %l_ij_115: f32 loc(callsite(#loc1 at #loc237))):
          %l_ij_116 = arith.addf %l_ij_114, %l_ij_115 : f32 loc(#loc288)
          tt.reduce.return %l_ij_116 : f32 loc(#loc281)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc281)
        %l_i_106 = arith.mulf %l_i_75, %alpha_104 : tensor<64xf32> loc(#loc238)
        %l_i_107 = arith.addf %l_i_106, %l_ij_105 : tensor<64xf32> loc(#loc239)
        %acc_108 = ttng.warp_group_dot_wait %acc_92 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc240)
        %acc_109 = tlx.release_layout %acc_108 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc226)
        %9 = ttg.memdesc_index %arg35[%v_buf_id_84] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc113)
        ttng.arrive_barrier %9, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc114)
        %acc_110 = tt.expand_dims %alpha_104 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc241)
        %acc_111 = tt.broadcast %acc_110 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc242)
        %acc_112 = arith.mulf %acc_109, %acc_111 : tensor<64x128xf32> loc(#loc242)
        %acc_cnt_113 = arith.addi %arg45, %c1_i32_28 : i32 loc(#loc243)
        scf.yield %m_ij_97, %l_i_107, %acc_112, %k_phase_79, %v_phase_87, %p_102, %acc_cnt_113 : tensor<64xf32>, tensor<64xf32>, tensor<64x128xf32>, i32, i32, tensor<64x128xf32>, i32 loc(#loc118)
      } loc(#loc299)
      %v_buf_id = arith.subi %acc_cnt#6, %c1_i32_28 : i32 loc(#loc244)
      %v_buf_id_49 = arith.remsi %v_buf_id, %c2_i32_26 : i32 loc(#loc245)
      %v_phase = arith.cmpi eq, %v_buf_id_49, %c0_i32_30 : i32 loc(#loc246)
      %v_phase_50 = arith.extui %v_phase : i1 to i32 loc(#loc247)
      %v_phase_51 = arith.xori %acc_cnt#4, %v_phase_50 : i32 loc(#loc247)
      %3 = ttg.memdesc_index %arg36[%v_buf_id_49] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc123)
      ttng.wait_barrier %3, %v_phase_51, %true_29 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc124)
      %p_52 = arith.truncf %acc_cnt#5 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc248)
      %acc_53 = ttg.memdesc_index %arg37[%v_buf_id_49] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc249)
      %acc_54 = tlx.require_layout %acc_cnt#2 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc250)
      %acc_55 = tlx.require_layout %p_52 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc250)
      %acc_56 = ttng.warp_group_dot %acc_55, %acc_53, %acc_54 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc250)
      %acc_57 = ttng.warp_group_dot_wait %acc_56 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc251)
      %acc_58 = tlx.release_layout %acc_57 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc250)
      %4 = ttg.memdesc_index %arg35[%v_buf_id_49] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc129)
      ttng.arrive_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc130)
      %start_m = tt.get_program_id x : i32 loc(#loc252)
      %off_hz = tt.get_program_id y : i32 loc(#loc253)
      %off_z = arith.divsi %off_hz, %arg25 : i32 loc(#loc254)
      %off_h = arith.remsi %off_hz, %arg25 : i32 loc(#loc255)
      %offset_y = arith.muli %arg27, %arg25 : i32 loc(#loc256)
      %offset_y_59 = arith.muli %off_z, %offset_y : i32 loc(#loc257)
      %offset_y_60 = arith.muli %off_h, %arg27 : i32 loc(#loc258)
      %offset_y_61 = arith.addi %offset_y_59, %offset_y_60 : i32 loc(#loc259)
      %qo_offset_y = arith.muli %start_m, %c128_i32_27 : i32 loc(#loc260)
      %qo_offset_y_62 = arith.addi %offset_y_61, %qo_offset_y : i32 loc(#loc261)
      %m_i_63 = math.log2 %acc_cnt#1 : tensor<64xf32> loc(#loc262)
      %m_i_64 = arith.addf %acc_cnt#0, %m_i_63 : tensor<64xf32> loc(#loc263)
      %acc_65 = tt.expand_dims %acc_cnt#1 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc264)
      %acc_66 = tt.broadcast %acc_65 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc265)
      %acc_67 = arith.divf %acc_58, %acc_66 : tensor<64x128xf32> loc(#loc265)
      %offs_m = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc266)
      %offs_m_68 = tt.splat %qo_offset_y : i32 -> tensor<64xi32> loc(#loc267)
      %offs_m_69 = arith.addi %offs_m_68, %offs_m : tensor<64xi32> loc(#loc267)
      %m_ptrs = arith.muli %off_hz, %arg27 : i32 loc(#loc268)
      %m_ptrs_70 = tt.addptr %arg26, %m_ptrs : !tt.ptr<f32>, i32 loc(#loc269)
      %m_ptrs_71 = tt.splat %m_ptrs_70 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc270)
      %m_ptrs_72 = tt.addptr %m_ptrs_71, %offs_m_69 : tensor<64x!tt.ptr<f32>>, tensor<64xi32> loc(#loc270)
      tt.store %m_ptrs_72, %m_i_64 : tensor<64x!tt.ptr<f32>> loc(#loc150)
      %5 = arith.truncf %acc_67 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc151)
      tt.descriptor_store %arg28[%qo_offset_y_62, %c0_i32_30], %5 : !tt.tensordesc<tensor<64x128xf16>>, tensor<64x128xf16> loc(#loc152)
      ttg.warp_return loc(#loc1)
    }
    partition1(%arg25: i32 loc(unknown), %arg26: !tt.ptr<f32> loc(unknown), %arg27: i32 loc(unknown), %arg28: !tt.tensordesc<tensor<64x128xf16>> loc(unknown), %arg29: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg30: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg31: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown), %arg32: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg33: !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> loc(unknown), %arg34: f32 loc(unknown), %arg35: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg36: !ttg.memdesc<2xi64, #shared1, #smem, mutable> loc(unknown), %arg37: !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> loc(unknown)) num_warps(4) {
      %acc = arith.constant dense<0.000000e+00> : tensor<64x1xf32> loc(#loc193)
      %c64_i32_26 = arith.constant 64 : i32 loc(#loc1)
      %c2_i32_27 = arith.constant 2 : i32 loc(#loc1)
      %c128_i32_28 = arith.constant 128 : i32 loc(#loc1)
      %cst = arith.constant dense<0.000000e+00> : tensor<64x128xf32> loc(#loc1)
      %c10_i32 = arith.constant 10 : i32 loc(#loc153)
      %c256_i32 = arith.constant 256 : i32 loc(#loc1)
      %c9_i32 = arith.constant 9 : i32 loc(#loc154)
      %c0_i32_29 = arith.constant 0 : i32 loc(#loc1)
      %true_30 = arith.constant true loc(#loc1)
      %c1_i32_31 = arith.constant 1 : i32 loc(#loc1)
      %cst_32 = arith.constant 1.44269502 : f32 loc(#loc1)
      %m_i = arith.constant dense<0xFF800000> : tensor<64xf32> loc(#loc194)
      %qk_scale = arith.mulf %arg34, %cst_32 : f32 loc(#loc195)
      %0 = ttg.memdesc_index %arg32[%c1_i32_31] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc52)
      ttng.wait_barrier %0, %c0_i32_29, %true_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc53)
      %1 = ttg.memdesc_index %arg30[%c0_i32_29] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc54)
      ttng.wait_barrier %1, %c0_i32_29, %true_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc55)
      %k_tile = ttg.memdesc_index %arg31[%c0_i32_29] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc196)
      %k_tile_33 = ttg.memdesc_trans %k_tile {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc197)
      ttng.arrive_barrier_named %c9_i32, %c256_i32 : i32, i32 loc(#loc154)
      ttng.wait_barrier_named %c10_i32, %c256_i32 : i32, i32 loc(#loc153)
      %qk = ttg.memdesc_index %arg33[%c1_i32_31] : !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x128xf16, #shared, #smem, mutable> loc(#loc198)
      %qk_34 = tlx.require_layout %cst : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc199)
      %qk_35 = ttng.warp_group_dot %qk, %k_tile_33, %qk_34 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc199)
      %qk_36 = ttng.warp_group_dot_wait %qk_35 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc200)
      %qk_37 = tlx.release_layout %qk_36 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc199)
      %2 = ttg.memdesc_index %arg29[%c0_i32_29] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc61)
      ttng.arrive_barrier %2, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc62)
      %m_ij = "tt.reduce"(%qk_37) <{axis = 1 : i32}> ({
      ^bb0(%m_ij_75: f32 loc(callsite(#loc1 at #loc201)), %m_ij_76: f32 loc(callsite(#loc1 at #loc201))):
        %m_ij_77 = arith.maxnumf %m_ij_75, %m_ij_76 : f32 loc(#loc284)
        tt.reduce.return %m_ij_77 : f32 loc(#loc274)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc274)
      %m_ij_38 = tt.splat %qk_scale : f32 -> tensor<64xf32> loc(#loc202)
      %m_ij_39 = arith.mulf %m_ij, %m_ij_38 : tensor<64xf32> loc(#loc202)
      %m_ij_40 = arith.maxnumf %m_ij_39, %m_i : tensor<64xf32> loc(#loc203)
      %qk_41 = tt.splat %qk_scale : f32 -> tensor<64x128xf32> loc(#loc204)
      %qk_42 = arith.mulf %qk_37, %qk_41 : tensor<64x128xf32> loc(#loc204)
      %qk_43 = tt.expand_dims %m_ij_40 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc205)
      %qk_44 = tt.broadcast %qk_43 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc206)
      %qk_45 = arith.subf %qk_42, %qk_44 : tensor<64x128xf32> loc(#loc206)
      %p = math.exp2 %qk_45 : tensor<64x128xf32> loc(#loc207)
      %alpha = arith.subf %m_i, %m_ij_40 : tensor<64xf32> loc(#loc208)
      %alpha_46 = math.exp2 %alpha : tensor<64xf32> loc(#loc209)
      %acc_47 = tt.expand_dims %alpha_46 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc210)
      %acc_48 = arith.mulf %acc_47, %acc : tensor<64x1xf32> loc(#loc193)
      %acc_49 = tt.broadcast %acc_48 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc193)
      %l_ij = "tt.reduce"(%p) <{axis = 1 : i32}> ({
      ^bb0(%l_ij_75: f32 loc(callsite(#loc1 at #loc211)), %l_ij_76: f32 loc(callsite(#loc1 at #loc211))):
        %l_ij_77 = arith.addf %l_ij_75, %l_ij_76 : f32 loc(#loc285)
        tt.reduce.return %l_ij_77 : f32 loc(#loc276)
      }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc276)
      %l_i = arith.addf %alpha_46, %l_ij : tensor<64xf32> loc(#loc212)
      %acc_cnt:7 = scf.for %acc_cnt_75 = %c128_i32_28 to %arg27 step %c128_i32_28 iter_args(%m_ij_76 = %m_ij_40, %l_i_77 = %l_i, %acc_78 = %acc_49, %arg42 = %c0_i32_29, %arg43 = %c1_i32_31, %p_79 = %p, %arg45 = %c1_i32_31) -> (tensor<64xf32>, tensor<64xf32>, tensor<64x128xf32>, i32, i32, tensor<64x128xf32>, i32)  : i32 {
        %k_buf_id = arith.remsi %arg45, %c2_i32_27 : i32 loc(#loc214)
        %k_phase = arith.cmpi eq, %k_buf_id, %c0_i32_29 : i32 loc(#loc215)
        %k_phase_80 = arith.extui %k_phase : i1 to i32 loc(#loc216)
        %k_phase_81 = arith.xori %arg42, %k_phase_80 : i32 loc(#loc216)
        %6 = ttg.memdesc_index %arg30[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc83)
        ttng.wait_barrier %6, %k_phase_81, %true_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc84)
        %k_tile_82 = ttg.memdesc_index %arg31[%k_buf_id] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc217)
        %k_tile_83 = ttg.memdesc_trans %k_tile_82 {order = array<i32: 1, 0>} : !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> loc(#loc218)
        %qk_84 = ttng.warp_group_dot %qk, %k_tile_83, %qk_34 {inputPrecision = 0 : i32, isAsync = true} : !ttg.memdesc<64x128xf16, #shared, #smem, mutable> * !ttg.memdesc<128x128xf16, #shared2, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc219)
        %v_buf_id_85 = arith.subi %arg45, %c1_i32_31 : i32 loc(#loc220)
        %v_buf_id_86 = arith.remsi %v_buf_id_85, %c2_i32_27 : i32 loc(#loc221)
        %v_phase_87 = arith.cmpi eq, %v_buf_id_86, %c0_i32_29 : i32 loc(#loc222)
        %v_phase_88 = arith.extui %v_phase_87 : i1 to i32 loc(#loc223)
        %v_phase_89 = arith.xori %arg43, %v_phase_88 : i32 loc(#loc223)
        %7 = ttg.memdesc_index %arg36[%v_buf_id_86] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc92)
        ttng.wait_barrier %7, %v_phase_89, %true_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc93)
        %p_90 = arith.truncf %p_79 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc224)
        %acc_91 = ttg.memdesc_index %arg37[%v_buf_id_86] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc225)
        %acc_92 = tlx.require_layout %acc_78 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc226)
        %acc_93 = tlx.require_layout %p_90 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc226)
        %acc_94 = ttng.warp_group_dot %acc_93, %acc_91, %acc_92 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc226)
        %qk_95 = ttng.warp_group_dot_wait %qk_84 {pendings = 1 : i32} : tensor<64x128xf32, #mma> loc(#loc227)
        %qk_96 = tlx.release_layout %qk_95 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc219)
        %8 = ttg.memdesc_index %arg29[%k_buf_id] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc98)
        ttng.arrive_barrier %8, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc99)
        %m_ij_97 = "tt.reduce"(%qk_96) <{axis = 1 : i32}> ({
        ^bb0(%m_ij_116: f32 loc(callsite(#loc1 at #loc228)), %m_ij_117: f32 loc(callsite(#loc1 at #loc228))):
          %m_ij_118 = arith.maxnumf %m_ij_116, %m_ij_117 : f32 loc(#loc287)
          tt.reduce.return %m_ij_118 : f32 loc(#loc279)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc279)
        %m_ij_98 = arith.mulf %m_ij_97, %m_ij_38 : tensor<64xf32> loc(#loc229)
        %m_ij_99 = arith.maxnumf %m_ij_76, %m_ij_98 : tensor<64xf32> loc(#loc230)
        %qk_100 = arith.mulf %qk_96, %qk_41 : tensor<64x128xf32> loc(#loc231)
        %qk_101 = tt.expand_dims %m_ij_99 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc232)
        %qk_102 = tt.broadcast %qk_101 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc233)
        %qk_103 = arith.subf %qk_100, %qk_102 : tensor<64x128xf32> loc(#loc233)
        %p_104 = math.exp2 %qk_103 : tensor<64x128xf32> loc(#loc234)
        %alpha_105 = arith.subf %m_ij_76, %m_ij_99 : tensor<64xf32> loc(#loc235)
        %alpha_106 = math.exp2 %alpha_105 : tensor<64xf32> loc(#loc236)
        %l_ij_107 = "tt.reduce"(%p_104) <{axis = 1 : i32}> ({
        ^bb0(%l_ij_116: f32 loc(callsite(#loc1 at #loc237)), %l_ij_117: f32 loc(callsite(#loc1 at #loc237))):
          %l_ij_118 = arith.addf %l_ij_116, %l_ij_117 : f32 loc(#loc288)
          tt.reduce.return %l_ij_118 : f32 loc(#loc281)
        }) : (tensor<64x128xf32>) -> tensor<64xf32> loc(#loc281)
        %l_i_108 = arith.mulf %l_i_77, %alpha_106 : tensor<64xf32> loc(#loc238)
        %l_i_109 = arith.addf %l_i_108, %l_ij_107 : tensor<64xf32> loc(#loc239)
        %acc_110 = ttng.warp_group_dot_wait %acc_94 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc240)
        %acc_111 = tlx.release_layout %acc_110 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc226)
        %9 = ttg.memdesc_index %arg35[%v_buf_id_86] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc113)
        ttng.arrive_barrier %9, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc114)
        %acc_112 = tt.expand_dims %alpha_106 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc241)
        %acc_113 = tt.broadcast %acc_112 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc242)
        %acc_114 = arith.mulf %acc_111, %acc_113 : tensor<64x128xf32> loc(#loc242)
        %acc_cnt_115 = arith.addi %arg45, %c1_i32_31 : i32 loc(#loc243)
        scf.yield %m_ij_99, %l_i_109, %acc_114, %k_phase_81, %v_phase_89, %p_104, %acc_cnt_115 : tensor<64xf32>, tensor<64xf32>, tensor<64x128xf32>, i32, i32, tensor<64x128xf32>, i32 loc(#loc118)
      } loc(#loc299)
      %v_buf_id = arith.subi %acc_cnt#6, %c1_i32_31 : i32 loc(#loc244)
      %v_buf_id_50 = arith.remsi %v_buf_id, %c2_i32_27 : i32 loc(#loc245)
      %v_phase = arith.cmpi eq, %v_buf_id_50, %c0_i32_29 : i32 loc(#loc246)
      %v_phase_51 = arith.extui %v_phase : i1 to i32 loc(#loc247)
      %v_phase_52 = arith.xori %acc_cnt#4, %v_phase_51 : i32 loc(#loc247)
      %3 = ttg.memdesc_index %arg36[%v_buf_id_50] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc123)
      ttng.wait_barrier %3, %v_phase_52, %true_30 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc124)
      %p_53 = arith.truncf %acc_cnt#5 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc248)
      %acc_54 = ttg.memdesc_index %arg37[%v_buf_id_50] : !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x128xf16, #shared, #smem, mutable> loc(#loc249)
      %acc_55 = tlx.require_layout %acc_cnt#2 : tensor<64x128xf32> -> tensor<64x128xf32, #mma> loc(#loc250)
      %acc_56 = tlx.require_layout %p_53 : tensor<64x128xf16> -> tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc250)
      %acc_57 = ttng.warp_group_dot %acc_56, %acc_54, %acc_55 {inputPrecision = 0 : i32, isAsync = true} : tensor<64x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * !ttg.memdesc<128x128xf16, #shared, #smem, mutable> -> tensor<64x128xf32, #mma> loc(#loc250)
      %acc_58 = ttng.warp_group_dot_wait %acc_57 {pendings = 0 : i32} : tensor<64x128xf32, #mma> loc(#loc251)
      %acc_59 = tlx.release_layout %acc_58 : tensor<64x128xf32, #mma> -> tensor<64x128xf32> loc(#loc250)
      %4 = ttg.memdesc_index %arg35[%v_buf_id_50] : !ttg.memdesc<2xi64, #shared1, #smem, mutable> -> !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc129)
      ttng.arrive_barrier %4, 1 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc130)
      %start_m = tt.get_program_id x : i32 loc(#loc252)
      %off_hz = tt.get_program_id y : i32 loc(#loc253)
      %off_z = arith.divsi %off_hz, %arg25 : i32 loc(#loc254)
      %off_h = arith.remsi %off_hz, %arg25 : i32 loc(#loc255)
      %offset_y = arith.muli %arg27, %arg25 : i32 loc(#loc256)
      %offset_y_60 = arith.muli %off_z, %offset_y : i32 loc(#loc257)
      %offset_y_61 = arith.muli %off_h, %arg27 : i32 loc(#loc258)
      %offset_y_62 = arith.addi %offset_y_60, %offset_y_61 : i32 loc(#loc259)
      %qo_offset_y = arith.muli %start_m, %c128_i32_28 : i32 loc(#loc260)
      %qo_offset_y_63 = arith.addi %offset_y_62, %qo_offset_y : i32 loc(#loc261)
      %qo_offset_y_split = arith.addi %qo_offset_y_63, %c64_i32_26 : i32 loc(#loc271)
      %m_i_64 = math.log2 %acc_cnt#1 : tensor<64xf32> loc(#loc262)
      %m_i_65 = arith.addf %acc_cnt#0, %m_i_64 : tensor<64xf32> loc(#loc263)
      %acc_66 = tt.expand_dims %acc_cnt#1 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc264)
      %acc_67 = tt.broadcast %acc_66 : tensor<64x1xf32> -> tensor<64x128xf32> loc(#loc265)
      %acc_68 = arith.divf %acc_59, %acc_67 : tensor<64x128xf32> loc(#loc265)
      %offs_m = arith.addi %qo_offset_y, %c64_i32_26 : i32 loc(#loc272)
      %offs_m_69 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc266)
      %offs_m_70 = tt.splat %offs_m : i32 -> tensor<64xi32> loc(#loc267)
      %offs_m_71 = arith.addi %offs_m_70, %offs_m_69 : tensor<64xi32> loc(#loc267)
      %m_ptrs = arith.muli %off_hz, %arg27 : i32 loc(#loc268)
      %m_ptrs_72 = tt.addptr %arg26, %m_ptrs : !tt.ptr<f32>, i32 loc(#loc269)
      %m_ptrs_73 = tt.splat %m_ptrs_72 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>> loc(#loc270)
      %m_ptrs_74 = tt.addptr %m_ptrs_73, %offs_m_71 : tensor<64x!tt.ptr<f32>>, tensor<64xi32> loc(#loc270)
      tt.store %m_ptrs_74, %m_i_65 : tensor<64x!tt.ptr<f32>> loc(#loc150)
      %5 = arith.truncf %acc_68 : tensor<64x128xf32> to tensor<64x128xf16> loc(#loc151)
      tt.descriptor_store %arg28[%qo_offset_y_split, %c0_i32_29], %5 : !tt.tensordesc<tensor<64x128xf16>>, tensor<64x128xf16> loc(#loc152)
      ttg.warp_return loc(#loc1)
    } : (i32, !tt.ptr<f32>, i32, !tt.tensordesc<tensor<64x128xf16>>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x64x128xf16, #shared, #smem, mutable>, f32, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2xi64, #shared1, #smem, mutable>, !ttg.memdesc<2x128x128xf16, #shared, #smem, mutable>) -> () loc(#loc10)
    ttng.inval_barrier %q_fulls_16 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %q_fulls_17 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %k_empties_18 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %k_empties_19 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %k_fulls_20 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %k_fulls_21 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %v_empties_22 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %v_empties_23 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %v_fulls_24 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    ttng.inval_barrier %v_fulls_25 : !ttg.memdesc<1xi64, #shared1, #smem, mutable> loc(#loc157)
    tt.return loc(#loc157)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":54:79)
#loc3 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":55:73)
#loc4 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":56:73)
#loc5 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":59:62)
#loc6 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":60:61)
#loc7 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":61:59)
#loc8 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":62:61)
#loc9 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":63:59)
#loc10 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:9)
#loc11 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":69:36)
#loc12 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":70:35)
#loc13 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":71:30)
#loc14 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":72:29)
#loc15 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:40)
#loc16 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:32)
#loc17 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:53)
#loc18 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":73:45)
#loc19 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:47)
#loc20 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":74:37)
#loc21 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":79:51)
#loc22 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:49)
#loc23 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":80:55)
#loc24 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:56)
#loc25 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":81:50)
#loc26 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:58)
#loc27 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":82:88)
#loc28 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":87:38)
#loc29 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":88:35)
#loc30 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:49)
#loc31 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":90:39)
#loc32 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:43)
#loc33 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":93:52)
#loc34 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:49)
#loc35 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":95:58)
#loc36 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:58)
#loc37 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":96:85)
#loc38 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:43)
#loc39 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":99:52)
#loc40 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:49)
#loc41 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":101:58)
#loc42 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:58)
#loc43 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":102:85)
#loc44 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":104:31)
#loc45 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:27)
#loc46 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":105:16)
#loc47 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:24)
#loc48 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":147:45)
#loc49 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":136:42)
#loc50 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":110:64)
#loc51 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":116:24)
#loc52 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:37)
#loc53 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":120:43)
#loc54 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:37)
#loc55 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":129:48)
#loc56 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:45)
#loc57 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":132:37)
#loc58 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:39)
#loc59 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":143:45)
#loc60 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":150:39)
#loc61 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:41)
#loc62 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":152:52)
#loc63 = loc("/root/triton/python/triton/language/standard.py":189:40)
#loc65 = loc("/root/triton/python/triton/language/standard.py":168:27)
#loc66 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:51)
#loc67 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":155:35)
#loc68 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:22)
#loc69 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:38)
#loc70 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":156:33)
#loc71 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":157:29)
#loc72 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:39)
#loc73 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":159:33)
#loc74 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":161:30)
#loc75 = loc("/root/triton/python/triton/language/standard.py":301:36)
#loc77 = loc("/root/triton/python/triton/language/standard.py":261:15)
#loc78 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":163:32)
#loc79 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":168:48)
#loc80 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":169:37)
#loc81 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:49)
#loc82 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":171:37)
#loc83 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:41)
#loc84 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":174:52)
#loc85 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:49)
#loc86 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":177:41)
#loc87 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":178:49)
#loc88 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:38)
#loc89 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":182:43)
#loc90 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:49)
#loc91 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":183:37)
#loc92 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:41)
#loc93 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":184:52)
#loc94 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":186:25)
#loc95 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:47)
#loc96 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":187:58)
#loc97 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":190:43)
#loc98 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:45)
#loc99 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":192:56)
#loc101 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:55)
#loc102 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":195:39)
#loc103 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:26)
#loc104 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:42)
#loc105 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":196:37)
#loc106 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":197:33)
#loc107 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:43)
#loc108 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":199:37)
#loc110 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:28)
#loc111 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":202:36)
#loc112 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":207:44)
#loc113 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:45)
#loc114 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":209:56)
#loc115 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:34)
#loc116 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":210:28)
#loc117 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:27)
#loc118 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":211:16)
#loc119 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:34)
#loc120 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":215:39)
#loc121 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:45)
#loc122 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":216:33)
#loc123 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:37)
#loc124 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":217:48)
#loc125 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":219:21)
#loc126 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:43)
#loc127 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":220:54)
#loc128 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":222:40)
#loc129 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:41)
#loc130 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":224:52)
#loc131 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":227:36)
#loc132 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":228:35)
#loc133 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":229:30)
#loc134 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":230:29)
#loc135 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:40)
#loc136 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:32)
#loc137 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:53)
#loc138 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":231:45)
#loc139 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:47)
#loc140 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":232:37)
#loc141 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:32)
#loc142 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":234:19)
#loc143 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:28)
#loc144 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":235:24)
#loc145 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:76)
#loc146 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:63)
#loc147 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:34)
#loc148 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:25)
#loc149 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":237:42)
#loc150 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":238:29)
#loc151 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:56)
#loc152 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":239:49)
#loc153 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":141:43)
#loc154 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":139:44)
#loc155 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":233:46)
#loc156 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":236:41)
#loc157 = loc("/root/triton-runner/examples/runner/tlx/v3.4.0/python/hopper-fa-ws-pipelined-pingpong.py":65:4)
#loc167 = loc("q_tiles"(#loc2))
#loc168 = loc("k_tiles"(#loc3))
#loc169 = loc("v_tiles"(#loc4))
#loc170 = loc("q_fulls"(#loc5))
#loc171 = loc("k_empties"(#loc6))
#loc172 = loc("k_fulls"(#loc7))
#loc173 = loc("v_empties"(#loc8))
#loc174 = loc("v_fulls"(#loc9))
#loc175 = loc("start_m"(#loc11))
#loc176 = loc("off_hz"(#loc12))
#loc177 = loc("off_z"(#loc13))
#loc178 = loc("off_h"(#loc14))
#loc179 = loc("offset_y"(#loc15))
#loc180 = loc("offset_y"(#loc16))
#loc181 = loc("offset_y"(#loc17))
#loc182 = loc("offset_y"(#loc18))
#loc183 = loc("qo_offset_y"(#loc19))
#loc184 = loc("qo_offset_y"(#loc20))
#loc185 = loc("qo_offset_y_split"(#loc24))
#loc186 = loc("qo_offset_y_split"(#loc25))
#loc187 = loc("kv_offset_y"(#loc28))
#loc188 = loc("buf_id"(#loc29))
#loc189 = loc("kv_phase"(#loc30))
#loc190 = loc("kv_phase"(#loc31))
#loc191 = loc("kv_offset_y"(#loc44))
#loc192 = loc("acc_cnt"(#loc45))
#loc193 = loc("acc"(#loc47))
#loc194 = loc("m_i"(#loc50))
#loc195 = loc("qk_scale"(#loc51))
#loc196 = loc("k_tile"(#loc56))
#loc197 = loc("k_tile"(#loc57))
#loc198 = loc("qk"(#loc58))
#loc199 = loc("qk"(#loc59))
#loc200 = loc("qk"(#loc60))
#loc202 = loc("m_ij"(#loc66))
#loc203 = loc("m_ij"(#loc67))
#loc204 = loc("qk"(#loc68))
#loc205 = loc("qk"(#loc69))
#loc206 = loc("qk"(#loc70))
#loc207 = loc("p"(#loc71))
#loc208 = loc("alpha"(#loc72))
#loc209 = loc("alpha"(#loc73))
#loc210 = loc("acc"(#loc74))
#loc212 = loc("l_i"(#loc78))
#loc213 = loc("m_i"(#loc79))
#loc214 = loc("k_buf_id"(#loc80))
#loc215 = loc("k_phase"(#loc81))
#loc216 = loc("k_phase"(#loc82))
#loc217 = loc("k_tile"(#loc85))
#loc218 = loc("k_tile"(#loc86))
#loc219 = loc("qk"(#loc87))
#loc220 = loc("v_buf_id"(#loc88))
#loc221 = loc("v_buf_id"(#loc89))
#loc222 = loc("v_phase"(#loc90))
#loc223 = loc("v_phase"(#loc91))
#loc224 = loc("p"(#loc94))
#loc225 = loc("acc"(#loc95))
#loc226 = loc("acc"(#loc96))
#loc227 = loc("qk"(#loc97))
#loc229 = loc("m_ij"(#loc101))
#loc230 = loc("m_ij"(#loc102))
#loc231 = loc("qk"(#loc103))
#loc232 = loc("qk"(#loc104))
#loc233 = loc("qk"(#loc105))
#loc234 = loc("p"(#loc106))
#loc235 = loc("alpha"(#loc107))
#loc236 = loc("alpha"(#loc108))
#loc238 = loc("l_i"(#loc110))
#loc239 = loc("l_i"(#loc111))
#loc240 = loc("acc"(#loc112))
#loc241 = loc("acc"(#loc115))
#loc242 = loc("acc"(#loc116))
#loc243 = loc("acc_cnt"(#loc117))
#loc244 = loc("v_buf_id"(#loc119))
#loc245 = loc("v_buf_id"(#loc120))
#loc246 = loc("v_phase"(#loc121))
#loc247 = loc("v_phase"(#loc122))
#loc248 = loc("p"(#loc125))
#loc249 = loc("acc"(#loc126))
#loc250 = loc("acc"(#loc127))
#loc251 = loc("acc"(#loc128))
#loc252 = loc("start_m"(#loc131))
#loc253 = loc("off_hz"(#loc132))
#loc254 = loc("off_z"(#loc133))
#loc255 = loc("off_h"(#loc134))
#loc256 = loc("offset_y"(#loc135))
#loc257 = loc("offset_y"(#loc136))
#loc258 = loc("offset_y"(#loc137))
#loc259 = loc("offset_y"(#loc138))
#loc260 = loc("qo_offset_y"(#loc139))
#loc261 = loc("qo_offset_y"(#loc140))
#loc262 = loc("m_i"(#loc141))
#loc263 = loc("m_i"(#loc142))
#loc264 = loc("acc"(#loc143))
#loc265 = loc("acc"(#loc144))
#loc266 = loc("offs_m"(#loc145))
#loc267 = loc("offs_m"(#loc146))
#loc268 = loc("m_ptrs"(#loc147))
#loc269 = loc("m_ptrs"(#loc148))
#loc270 = loc("m_ptrs"(#loc149))
#loc271 = loc("qo_offset_y_split"(#loc155))
#loc272 = loc("offs_m"(#loc156))
#loc273 = loc("kv_phase"(#loc187))
#loc274 = loc(callsite(#loc63 at #loc201))
#loc276 = loc(callsite(#loc75 at #loc211))
#loc278 = loc("l_i"(#loc213))
#loc279 = loc(callsite(#loc63 at #loc228))
#loc281 = loc(callsite(#loc75 at #loc237))
#loc283 = loc("acc_cnt"(#loc273))
#loc284 = loc(callsite(#loc65 at #loc274))
#loc285 = loc(callsite(#loc77 at #loc276))
#loc286 = loc("acc"(#loc278))
#loc287 = loc(callsite(#loc65 at #loc279))
#loc288 = loc(callsite(#loc77 at #loc281))
#loc289 = loc("k_phase"(#loc286))
#loc290 = loc("v_phase"(#loc289))
#loc291 = loc("k_buf_id"(#loc290))
#loc292 = loc("v_buf_id"(#loc291))
#loc293 = loc("k_tile"(#loc292))
#loc294 = loc("qk"(#loc293))
#loc295 = loc("m_ij"(#loc294))
#loc296 = loc("p"(#loc295))
#loc297 = loc("alpha"(#loc296))
#loc298 = loc("l_ij"(#loc297))
#loc299 = loc("acc_cnt"(#loc298))
