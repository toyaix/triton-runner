#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":7:0)
#mma = #ttg.nvidia_mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 2], instrShape = [16, 8]}>
#shared = #ttg.swizzled_shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#smem = #ttg.shared_memory
#loc42 = loc("a_ptr"(#loc))
#loc43 = loc("b_ptr"(#loc))
#loc44 = loc("c_ptr"(#loc))
#loc45 = loc("M"(#loc))
#loc46 = loc("N"(#loc))
#loc47 = loc("K"(#loc))
#loc48 = loc("stride_am"(#loc))
#loc49 = loc("stride_bn"(#loc))
#loc50 = loc("stride_cm"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:80", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel(%a_ptr: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("a_ptr"(#loc)), %b_ptr: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("b_ptr"(#loc)), %c_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("c_ptr"(#loc)), %M: i32 {tt.divisibility = 16 : i32} loc("M"(#loc)), %N: i32 {tt.divisibility = 16 : i32} loc("N"(#loc)), %K: i32 {tt.divisibility = 16 : i32} loc("K"(#loc)), %stride_am: i32 {tt.divisibility = 16 : i32} loc("stride_am"(#loc)), %stride_bn: i32 {tt.divisibility = 16 : i32} loc("stride_bn"(#loc)), %stride_cm: i32 {tt.divisibility = 16 : i32} loc("stride_cm"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x64xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x64xf16, #blocked> loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<128x64xi32, #blocked> loc(#loc1)
    %pid_k = tt.get_program_id x : i32 loc(#loc51)
    %pid_m = tt.get_program_id y : i32 loc(#loc52)
    %offs_m = arith.muli %pid_m, %c128_i32 : i32 loc(#loc53)
    %offs_m_3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc54)
    %offs_m_4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc54)
    %offs_m_5 = tt.splat %offs_m : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %offs_m_6 = tt.splat %offs_m : i32 -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc55)
    %offs_m_7 = arith.addi %offs_m_5, %offs_m_3 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %offs_m_8 = arith.addi %offs_m_6, %offs_m_4 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc55)
    %offs_k = arith.muli %pid_k, %c64_i32 : i32 loc(#loc56)
    %offs_k_9 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc57)
    %offs_k_10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc57)
    %offs_k_11 = tt.splat %offs_k : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc58)
    %offs_k_12 = tt.splat %offs_k : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc58)
    %offs_k_13 = arith.addi %offs_k_11, %offs_k_9 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc58)
    %offs_k_14 = arith.addi %offs_k_12, %offs_k_10 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc58)
    %a_ptrs = tt.expand_dims %offs_m_7 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc59)
    %a_ptrs_15 = tt.expand_dims %offs_m_8 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc59)
    %a_ptrs_16 = tt.splat %stride_am : i32 -> tensor<128x1xi32, #blocked> loc(#loc60)
    %a_ptrs_17 = arith.muli %a_ptrs, %a_ptrs_16 : tensor<128x1xi32, #blocked> loc(#loc60)
    %a_ptrs_18 = tt.splat %a_ptr : !tt.ptr<f16> -> tensor<128x1x!tt.ptr<f16>, #blocked> loc(#loc61)
    %a_ptrs_19 = tt.addptr %a_ptrs_18, %a_ptrs_17 : tensor<128x1x!tt.ptr<f16>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc61)
    %a_ptrs_20 = tt.expand_dims %offs_k_9 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc62)
    %a_ptrs_21 = tt.broadcast %a_ptrs_19 : tensor<128x1x!tt.ptr<f16>, #blocked> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc63)
    %a_ptrs_22 = tt.broadcast %a_ptrs_20 : tensor<1x64xi32, #blocked> -> tensor<128x64xi32, #blocked> loc(#loc63)
    %a_ptrs_23 = tt.addptr %a_ptrs_21, %a_ptrs_22 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc63)
    %b_ptrs = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc64)
    %b_ptrs_24 = tt.expand_dims %b_ptrs {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc64)
    %b_ptrs_25 = tt.splat %stride_bn : i32 -> tensor<64x1xi32, #blocked> loc(#loc65)
    %b_ptrs_26 = arith.muli %b_ptrs_24, %b_ptrs_25 : tensor<64x1xi32, #blocked> loc(#loc65)
    %b_ptrs_27 = tt.splat %b_ptr : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc66)
    %b_ptrs_28 = tt.addptr %b_ptrs_27, %b_ptrs_26 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc66)
    %b_ptrs_29 = tt.expand_dims %offs_k_13 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc67)
    %b_ptrs_30 = tt.expand_dims %offs_k_14 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc67)
    %b_ptrs_31 = tt.broadcast %b_ptrs_28 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc68)
    %b_ptrs_32 = tt.broadcast %b_ptrs_29 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc68)
    %b_ptrs_33 = tt.addptr %b_ptrs_31, %b_ptrs_32 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc68)
    %0 = arith.addi %N, %c63_i32 : i32 loc(#loc69)
    %1 = arith.divsi %0, %c64_i32 : i32 loc(#loc70)
    %a = ttg.local_alloc : () -> !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> loc(#loc71)
    %b = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> loc(#loc72)
    %accumulator = arith.cmpi sgt, %1, %c0_i32 : i32 loc(#loc73)
    %a_34 = tt.splat %N : i32 -> tensor<1x64xi32, #blocked> loc(#loc74)
    %a_35 = arith.cmpi slt, %a_ptrs_20, %a_34 : tensor<1x64xi32, #blocked> loc(#loc74)
    %a_36 = tt.broadcast %a_35 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc71)
    %a_37 = ttg.memdesc_index %a[%c0_i32] : !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
    %accumulator_38 = tt.splat %accumulator : i1 -> tensor<128x64xi1, #blocked> loc(#loc73)
    %accumulator_39 = arith.andi %accumulator_38, %a_36 : tensor<128x64xi1, #blocked> loc(#loc73)
    %a_40 = ttg.async_copy_global_to_local %a_ptrs_23, %a_37 mask %accumulator_39 other %cst_0 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
    %a_41 = ttg.async_commit_group tokens %a_40 loc(#loc71)
    %b_42 = tt.splat %N : i32 -> tensor<64x1xi32, #blocked> loc(#loc75)
    %b_43 = arith.cmpi slt, %b_ptrs_24, %b_42 : tensor<64x1xi32, #blocked> loc(#loc75)
    %b_44 = tt.broadcast %b_43 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc72)
    %b_45 = ttg.memdesc_index %b[%c0_i32] : !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
    %accumulator_46 = tt.splat %accumulator : i1 -> tensor<64x64xi1, #blocked> loc(#loc73)
    %accumulator_47 = arith.andi %accumulator_46, %b_44 : tensor<64x64xi1, #blocked> loc(#loc73)
    %b_48 = ttg.async_copy_global_to_local %b_ptrs_33, %b_45 mask %accumulator_47 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
    %b_49 = ttg.async_commit_group tokens %b_48 loc(#loc72)
    %accumulator_50 = arith.cmpi sgt, %1, %c1_i32 : i32 loc(#loc73)
    %max_idx = arith.subi %N, %c64_i32 : i32 loc(#loc76)
    %a_51 = tt.splat %max_idx : i32 -> tensor<1x64xi32, #blocked> loc(#loc74)
    %a_52 = arith.cmpi slt, %a_ptrs_20, %a_51 : tensor<1x64xi32, #blocked> loc(#loc74)
    %a_53 = tt.addptr %a_ptrs_23, %cst_2 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc77)
    %a_54 = tt.broadcast %a_52 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc71)
    %a_55 = ttg.memdesc_index %a[%c1_i32] : !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
    %accumulator_56 = tt.splat %accumulator_50 : i1 -> tensor<128x64xi1, #blocked> loc(#loc73)
    %accumulator_57 = arith.andi %accumulator_56, %a_54 : tensor<128x64xi1, #blocked> loc(#loc73)
    %a_58 = ttg.async_copy_global_to_local %a_53, %a_55 mask %accumulator_57 other %cst_0 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
    %a_59 = ttg.async_commit_group tokens %a_58 loc(#loc71)
    %b_60 = tt.splat %max_idx : i32 -> tensor<64x1xi32, #blocked> loc(#loc75)
    %b_61 = arith.cmpi slt, %b_ptrs_24, %b_60 : tensor<64x1xi32, #blocked> loc(#loc75)
    %b_62 = arith.muli %stride_bn, %c64_i32 : i32 loc(#loc78)
    %b_63 = tt.splat %b_62 : i32 -> tensor<64x64xi32, #blocked> loc(#loc79)
    %b_64 = tt.addptr %b_ptrs_33, %b_63 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc79)
    %b_65 = tt.broadcast %b_61 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc72)
    %b_66 = ttg.memdesc_index %b[%c1_i32] : !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
    %accumulator_67 = tt.splat %accumulator_50 : i1 -> tensor<64x64xi1, #blocked> loc(#loc73)
    %accumulator_68 = arith.andi %accumulator_67, %b_65 : tensor<64x64xi1, #blocked> loc(#loc73)
    %b_69 = ttg.async_copy_global_to_local %b_64, %b_66 mask %accumulator_68 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
    %b_70 = ttg.async_commit_group tokens %b_69 loc(#loc72)
    %accumulator_71:7 = scf.for %accumulator_85 = %c0_i32 to %1 step %c1_i32 iter_args(%accumulator_86 = %cst, %arg11 = %c1_i32, %accumulator_87 = %c-1_i32, %a_88 = %a_41, %a_89 = %a_59, %b_90 = %b_49, %b_91 = %b_70) -> (tensor<128x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token)  : i32 {
      %accumulator_92 = arith.subi %1, %c2_i32 : i32 loc(#loc73)
      %accumulator_93 = arith.cmpi slt, %accumulator_85, %accumulator_92 : i32 loc(#loc73)
      %accumulator_94 = arith.addi %accumulator_87, %c1_i32 : i32 loc(#loc73)
      %accumulator_95 = arith.cmpi sge, %accumulator_94, %c2_i32 : i32 loc(#loc73)
      %accumulator_96 = arith.select %accumulator_95, %c0_i32, %accumulator_94 : i32 loc(#loc73)
      %a_97 = ttg.async_wait %a_88, %b_90 {num = 2 : i32} loc(#loc71)
      %a_98 = ttg.memdesc_index %a[%accumulator_96] : !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
      %a_99 = ttg.local_load %a_98 token %a_97 : !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 2x128x64> -> tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> loc(#loc71)
      %b_100 = ttg.memdesc_index %b[%accumulator_96] : !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
      %b_101 = ttg.local_load %b_100 token %a_97 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> loc(#loc72)
      %accumulator_102 = tt.dot %a_99, %b_101, %accumulator_86, inputPrecision = tf32 : tensor<128x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 2}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 2}>> -> tensor<128x64xf32, #mma> loc(#loc80)
      %accumulator_103 = arith.addi %arg11, %c1_i32 : i32 loc(#loc73)
      %accumulator_104 = arith.cmpi sge, %accumulator_103, %c2_i32 : i32 loc(#loc73)
      %accumulator_105 = arith.select %accumulator_104, %c0_i32, %accumulator_103 : i32 loc(#loc73)
      %accumulator_106 = arith.addi %accumulator_85, %c2_i32 : i32 loc(#loc73)
      %max_idx_107 = arith.muli %accumulator_106, %c64_i32 : i32 loc(#loc81)
      %max_idx_108 = arith.subi %N, %max_idx_107 : i32 loc(#loc76)
      %a_109 = tt.splat %max_idx_108 : i32 -> tensor<1x64xi32, #blocked> loc(#loc74)
      %a_110 = arith.cmpi slt, %a_ptrs_20, %a_109 : tensor<1x64xi32, #blocked> loc(#loc74)
      %a_111 = tt.splat %max_idx_107 : i32 -> tensor<128x64xi32, #blocked> loc(#loc77)
      %a_112 = tt.addptr %a_ptrs_23, %a_111 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi32, #blocked> loc(#loc77)
      %a_113 = tt.broadcast %a_110 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc71)
      %a_114 = ttg.memdesc_index %a[%accumulator_105] : !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
      %accumulator_115 = tt.splat %accumulator_93 : i1 -> tensor<128x64xi1, #blocked> loc(#loc73)
      %accumulator_116 = arith.andi %accumulator_115, %a_113 : tensor<128x64xi1, #blocked> loc(#loc73)
      %a_117 = ttg.async_copy_global_to_local %a_112, %a_114 mask %accumulator_116 other %cst_0 : tensor<128x64x!tt.ptr<f16>, #blocked> -> <128x64xf16, #shared, #smem, mutable, 2x128x64> loc(#loc71)
      %a_118 = ttg.async_commit_group tokens %a_117 loc(#loc71)
      %b_119 = tt.splat %max_idx_108 : i32 -> tensor<64x1xi32, #blocked> loc(#loc75)
      %b_120 = arith.cmpi slt, %b_ptrs_24, %b_119 : tensor<64x1xi32, #blocked> loc(#loc75)
      %b_121 = arith.muli %max_idx_107, %stride_bn : i32 loc(#loc78)
      %b_122 = tt.splat %b_121 : i32 -> tensor<64x64xi32, #blocked> loc(#loc79)
      %b_123 = tt.addptr %b_ptrs_33, %b_122 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc79)
      %b_124 = tt.broadcast %b_120 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc72)
      %b_125 = ttg.memdesc_index %b[%accumulator_105] : !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
      %accumulator_126 = tt.splat %accumulator_93 : i1 -> tensor<64x64xi1, #blocked> loc(#loc73)
      %accumulator_127 = arith.andi %accumulator_126, %b_124 : tensor<64x64xi1, #blocked> loc(#loc73)
      %b_128 = ttg.async_copy_global_to_local %b_123, %b_125 mask %accumulator_127 other %cst_1 : tensor<64x64x!tt.ptr<f16>, #blocked> -> <64x64xf16, #shared, #smem, mutable, 2x64x64> loc(#loc72)
      %b_129 = ttg.async_commit_group tokens %b_128 loc(#loc72)
      scf.yield %accumulator_102, %accumulator_105, %accumulator_96, %a_89, %a_118, %b_91, %b_129 : tensor<128x64xf32, #mma>, i32, i32, !ttg.async.token, !ttg.async.token, !ttg.async.token, !ttg.async.token loc(#loc73)
    } loc(#loc73)
    %accumulator_72 = ttg.async_wait {num = 0 : i32} loc(#loc73)
    ttg.local_dealloc %b : !ttg.memdesc<2x64x64xf16, #shared, #smem, mutable> loc(#loc73)
    ttg.local_dealloc %a : !ttg.memdesc<2x128x64xf16, #shared, #smem, mutable> loc(#loc73)
    %c_ptrs = tt.splat %stride_cm : i32 -> tensor<128x1xi32, #blocked1> loc(#loc82)
    %c_ptrs_73 = arith.muli %a_ptrs_15, %c_ptrs : tensor<128x1xi32, #blocked1> loc(#loc82)
    %c_ptrs_74 = tt.splat %c_ptr : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc83)
    %c_ptrs_75 = tt.addptr %c_ptrs_74, %c_ptrs_73 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc83)
    %c_ptrs_76 = tt.broadcast %c_ptrs_75 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc84)
    %c_ptrs_77 = tt.broadcast %b_ptrs_30 : tensor<1x64xi32, #blocked1> -> tensor<128x64xi32, #blocked1> loc(#loc84)
    %c_ptrs_78 = tt.addptr %c_ptrs_76, %c_ptrs_77 : tensor<128x64x!tt.ptr<f32>, #blocked1>, tensor<128x64xi32, #blocked1> loc(#loc84)
    %c_mask = tt.splat %M : i32 -> tensor<128x1xi32, #blocked1> loc(#loc85)
    %c_mask_79 = arith.cmpi slt, %a_ptrs_15, %c_mask : tensor<128x1xi32, #blocked1> loc(#loc85)
    %c_mask_80 = tt.splat %K : i32 -> tensor<1x64xi32, #blocked1> loc(#loc86)
    %c_mask_81 = arith.cmpi slt, %b_ptrs_30, %c_mask_80 : tensor<1x64xi32, #blocked1> loc(#loc86)
    %c_mask_82 = tt.broadcast %c_mask_79 : tensor<128x1xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc87)
    %c_mask_83 = tt.broadcast %c_mask_81 : tensor<1x64xi1, #blocked1> -> tensor<128x64xi1, #blocked1> loc(#loc87)
    %c_mask_84 = arith.andi %c_mask_82, %c_mask_83 : tensor<128x64xi1, #blocked1> loc(#loc87)
    %2 = ttg.convert_layout %accumulator_71#0 : tensor<128x64xf32, #mma> -> tensor<128x64xf32, #blocked1> loc(#loc40)
    tt.store %c_ptrs_78, %2, %c_mask_84 : tensor<128x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":16:26)
#loc3 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":17:26)
#loc4 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":19:21)
#loc5 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":19:49)
#loc6 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":19:36)
#loc7 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":20:21)
#loc8 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":20:49)
#loc9 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":20:36)
#loc10 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":23:28)
#loc11 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":23:39)
#loc12 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":23:21)
#loc13 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":23:58)
#loc14 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":23:51)
#loc15 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":24:28)
#loc16 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":24:39)
#loc17 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":24:21)
#loc18 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":24:58)
#loc19 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":24:51)
#loc20 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":41:22)
#loc21 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":28:33)
#loc22 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":41:28)
#loc23 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":30:20)
#loc24 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":31:20)
#loc25 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":28:22)
#loc26 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":30:82)
#loc27 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":31:82)
#loc28 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":29:22)
#loc29 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":30:29)
#loc30 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":31:48)
#loc31 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":31:29)
#loc32 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":32:32)
#loc33 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":29:26)
#loc34 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":34:39)
#loc35 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":34:21)
#loc36 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":34:51)
#loc37 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":35:32)
#loc38 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":35:56)
#loc39 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":35:38)
#loc40 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":36:21)
#loc41 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-dot-v2.py":36:4)
#loc51 = loc("pid_k"(#loc2))
#loc52 = loc("pid_m"(#loc3))
#loc53 = loc("offs_m"(#loc4))
#loc54 = loc("offs_m"(#loc5))
#loc55 = loc("offs_m"(#loc6))
#loc56 = loc("offs_k"(#loc7))
#loc57 = loc("offs_k"(#loc8))
#loc58 = loc("offs_k"(#loc9))
#loc59 = loc("a_ptrs"(#loc10))
#loc60 = loc("a_ptrs"(#loc11))
#loc61 = loc("a_ptrs"(#loc12))
#loc62 = loc("a_ptrs"(#loc13))
#loc63 = loc("a_ptrs"(#loc14))
#loc64 = loc("b_ptrs"(#loc15))
#loc65 = loc("b_ptrs"(#loc16))
#loc66 = loc("b_ptrs"(#loc17))
#loc67 = loc("b_ptrs"(#loc18))
#loc68 = loc("b_ptrs"(#loc19))
#loc69 = loc(callsite(#loc20 at #loc21))
#loc70 = loc(callsite(#loc22 at #loc21))
#loc71 = loc("a"(#loc23))
#loc72 = loc("b"(#loc24))
#loc73 = loc("accumulator"(#loc25))
#loc74 = loc("a"(#loc26))
#loc75 = loc("b"(#loc27))
#loc76 = loc("max_idx"(#loc28))
#loc77 = loc("a"(#loc29))
#loc78 = loc("b"(#loc30))
#loc79 = loc("b"(#loc31))
#loc80 = loc("accumulator"(#loc32))
#loc81 = loc("max_idx"(#loc33))
#loc82 = loc("c_ptrs"(#loc34))
#loc83 = loc("c_ptrs"(#loc35))
#loc84 = loc("c_ptrs"(#loc36))
#loc85 = loc("c_mask"(#loc37))
#loc86 = loc("c_mask"(#loc38))
#loc87 = loc("c_mask"(#loc39))
