#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 2], order = [1, 0]}>
#loc = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":12:0)
#mma = #ttg.nvidia_mma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [16, 64, 32]}>
#shared = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = false, elementBitWidth = 8}>
#shared1 = #ttg.nvmma_shared<{swizzlingByteWidth = 128, transposed = false, elementBitWidth = 16}>
#shared2 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [0]}>
#shared3 = #ttg.nvmma_shared<{swizzlingByteWidth = 64, transposed = true, elementBitWidth = 8}>
#smem = #ttg.shared_memory
#loc20 = loc("a_ptr"(#loc))
#loc21 = loc("b_ptr"(#loc))
#loc22 = loc("c_ptr"(#loc))
#loc23 = loc("M"(#loc))
#loc24 = loc("N"(#loc))
#loc25 = loc("K"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @matmul_kernel_make_tensor_desciptor(%a_ptr: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("a_ptr"(#loc)), %b_ptr: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("b_ptr"(#loc)), %c_ptr: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("c_ptr"(#loc)), %M: i32 {tt.divisibility = 16 : i32} loc("M"(#loc)), %N: i32 {tt.divisibility = 16 : i32} loc("N"(#loc)), %K: i32 {tt.divisibility = 16 : i32} loc("K"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c-1_i32 = arith.constant -1 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c3_i32 = arith.constant 3 : i32 loc(#loc1)
    %c2_i64 = arith.constant 2 : i64 loc(#loc1)
    %pid_m = tt.get_program_id x : i32 loc(#loc26)
    %pid_k = tt.get_program_id y : i32 loc(#loc27)
    %a_desc = arith.extsi %N : i32 to i64 loc(#loc28)
    %a_desc_0 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc28)
    ttng.tensormap_create %a_desc_0, %a_ptr, [%c64_i32, %c128_i32], [%N, %M], [%a_desc], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc28)
    ttng.tensormap_fenceproxy_acquire %a_desc_0 : !tt.ptr<i8> loc(#loc28)
    %a_desc_1 = ttng.reinterpret_tensor_descriptor %a_desc_0 : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf8E5M2, #shared>> loc(#loc28)
    %b_desc = arith.extsi %K : i32 to i64 loc(#loc29)
    %b_desc_2 = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc29)
    ttng.tensormap_create %b_desc_2, %b_ptr, [%c64_i32, %c64_i32], [%K, %N], [%b_desc], [%c1_i32, %c1_i32] {elem_type = 0 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 2 : i32} : (!tt.ptr<i8>, !tt.ptr<f8E5M2>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc29)
    ttng.tensormap_fenceproxy_acquire %b_desc_2 : !tt.ptr<i8> loc(#loc29)
    %b_desc_3 = ttng.reinterpret_tensor_descriptor %b_desc_2 : !tt.ptr<i8> to !tt.tensordesc<tensor<64x64xf8E5M2, #shared>> loc(#loc29)
    %c_desc = ttg.global_scratch_alloc {alignment = 128 : i32, nbytes = 128 : i32} : !tt.ptr<i8> loc(#loc30)
    %c_desc_4 = arith.muli %b_desc, %c2_i64 : i64 loc(#loc30)
    ttng.tensormap_create %c_desc, %c_ptr, [%c64_i32, %c128_i32], [%K, %M], [%c_desc_4], [%c1_i32, %c1_i32] {elem_type = 6 : i32, fill_mode = 0 : i32, interleave_layout = 0 : i32, swizzle_mode = 3 : i32} : (!tt.ptr<i8>, !tt.ptr<f16>, i32, i32, i32, i32, i64, i32, i32) -> () loc(#loc30)
    ttng.tensormap_fenceproxy_acquire %c_desc : !tt.ptr<i8> loc(#loc30)
    %c_desc_5 = ttng.reinterpret_tensor_descriptor %c_desc : !tt.ptr<i8> to !tt.tensordesc<tensor<128x64xf16, #shared1>> loc(#loc30)
    %0 = arith.addi %N, %c63_i32 : i32 loc(#loc31)
    %1 = arith.divsi %0, %c64_i32 : i32 loc(#loc32)
    %a = arith.muli %pid_m, %c128_i32 : i32 loc(#loc33)
    %b = arith.muli %pid_k, %c64_i32 : i32 loc(#loc34)
    %a_6 = ttg.local_alloc : () -> !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc35)
    %b_7 = ttg.local_alloc : () -> !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc36)
    %accumulator = ttg.local_alloc : () -> !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> loc(#loc37)
    %accumulator_8 = ttg.memdesc_index %accumulator[%c0_i32] : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttng.init_barrier %accumulator_8, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    %accumulator_9 = ttg.memdesc_index %accumulator[%c1_i32] : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttng.init_barrier %accumulator_9, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    %accumulator_10 = ttg.memdesc_index %accumulator[%c2_i32] : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttng.init_barrier %accumulator_10, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    %accumulator_11 = ttg.local_alloc : () -> !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> loc(#loc37)
    %accumulator_12 = ttg.memdesc_index %accumulator_11[%c0_i32] : !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    ttng.init_barrier %accumulator_12, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    %accumulator_13 = ttg.memdesc_index %accumulator_11[%c1_i32] : !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    ttng.init_barrier %accumulator_13, 1 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    %accumulator_14 = arith.cmpi sgt, %1, %c0_i32 : i32 loc(#loc37)
    ttng.barrier_expect %accumulator_8, 8192, %accumulator_14 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    %a_15 = ttg.memdesc_index %a_6[%c0_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
    ttng.async_tma_copy_global_to_local %a_desc_1[%a, %c0_i32] %a_15, %accumulator_8, %accumulator_14 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
    ttng.barrier_expect %accumulator_12, 4096, %accumulator_14 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    %b_16 = ttg.memdesc_index %b_7[%c0_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
    ttng.async_tma_copy_global_to_local %b_desc_3[%c0_i32, %b] %b_16, %accumulator_12, %accumulator_14 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
    %accumulator_17 = arith.cmpi sgt, %1, %c1_i32 : i32 loc(#loc37)
    ttng.barrier_expect %accumulator_9, 8192, %accumulator_17 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    %a_18 = ttg.memdesc_index %a_6[%c1_i32] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
    ttng.async_tma_copy_global_to_local %a_desc_1[%a, %c64_i32] %a_18, %accumulator_9, %accumulator_17 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
    ttng.barrier_expect %accumulator_13, 4096, %accumulator_17 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    %b_19 = ttg.memdesc_index %b_7[%c1_i32] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
    ttng.async_tma_copy_global_to_local %b_desc_3[%c64_i32, %b] %b_19, %accumulator_13, %accumulator_17 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
    %accumulator_20:7 = scf.for %accumulator_22 = %c0_i32 to %1 step %c1_i32 iter_args(%accumulator_23 = %cst, %arg8 = %c1_i32, %accumulator_24 = %c-1_i32, %arg10 = %c0_i32, %arg11 = %c1_i32, %accumulator_25 = %c-1_i32, %arg13 = %c0_i32) -> (tensor<128x64xf32, #mma>, i32, i32, i32, i32, i32, i32)  : i32 {
      %accumulator_26 = arith.subi %1, %c2_i32 : i32 loc(#loc37)
      %accumulator_27 = arith.cmpi slt, %accumulator_22, %accumulator_26 : i32 loc(#loc37)
      %accumulator_28 = arith.addi %accumulator_25, %c1_i32 : i32 loc(#loc37)
      %accumulator_29 = arith.cmpi sge, %accumulator_28, %c2_i32 : i32 loc(#loc37)
      %accumulator_30 = arith.select %accumulator_29, %c0_i32, %accumulator_28 : i32 loc(#loc37)
      %accumulator_31 = arith.xori %arg13, %c1_i32 : i32 loc(#loc37)
      %accumulator_32 = arith.select %accumulator_29, %accumulator_31, %arg13 : i32 loc(#loc37)
      %accumulator_33 = arith.addi %accumulator_24, %c1_i32 : i32 loc(#loc37)
      %accumulator_34 = arith.cmpi sge, %accumulator_33, %c3_i32 : i32 loc(#loc37)
      %accumulator_35 = arith.select %accumulator_34, %c0_i32, %accumulator_33 : i32 loc(#loc37)
      %accumulator_36 = arith.xori %arg10, %c1_i32 : i32 loc(#loc37)
      %accumulator_37 = arith.select %accumulator_34, %accumulator_36, %arg10 : i32 loc(#loc37)
      %accumulator_38 = ttg.memdesc_index %accumulator[%accumulator_35] : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
      ttng.wait_barrier %accumulator_38, %accumulator_37 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
      %a_39 = ttg.memdesc_index %a_6[%accumulator_35] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
      %accumulator_40 = ttg.memdesc_index %accumulator_11[%accumulator_30] : !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
      ttng.wait_barrier %accumulator_40, %accumulator_32 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
      %b_41 = ttg.memdesc_index %b_7[%accumulator_30] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
      %b_42 = ttg.local_load %b_41 : !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> -> tensor<64x64xf8E5M2, #blocked> loc(#loc36)
      %b_43 = ttg.local_alloc %b_42 : (tensor<64x64xf8E5M2, #blocked>) -> !ttg.memdesc<64x64xf8E5M2, #shared3, #smem> loc(#loc36)
      ttng.fence_async_shared {bCluster = false} loc(#loc38)
      %accumulator_44 = ttng.warp_group_dot %a_39, %b_43, %accumulator_23 {inputPrecision = 0 : i32, isAsync = true, maxNumImpreciseAcc = 1073741824 : i32} : !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> * !ttg.memdesc<64x64xf8E5M2, #shared3, #smem> -> tensor<128x64xf32, #mma> loc(#loc38)
      %accumulator_45:3 = ttng.warp_group_dot_wait %accumulator_44, %a_39, %b_43 {pendings = 0 : i32} : tensor<128x64xf32, #mma>, !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64>, !ttg.memdesc<64x64xf8E5M2, #shared3, #smem> loc(#loc38)
      %accumulator_46 = arith.addi %arg11, %c1_i32 : i32 loc(#loc37)
      %accumulator_47 = arith.cmpi sge, %accumulator_46, %c2_i32 : i32 loc(#loc37)
      %accumulator_48 = arith.select %accumulator_47, %c0_i32, %accumulator_46 : i32 loc(#loc37)
      %accumulator_49 = arith.addi %arg8, %c1_i32 : i32 loc(#loc37)
      %accumulator_50 = arith.cmpi sge, %accumulator_49, %c3_i32 : i32 loc(#loc37)
      %accumulator_51 = arith.select %accumulator_50, %c0_i32, %accumulator_49 : i32 loc(#loc37)
      %accumulator_52 = arith.addi %accumulator_22, %c2_i32 : i32 loc(#loc37)
      %a_53 = arith.muli %accumulator_52, %c64_i32 : i32 loc(#loc39)
      %accumulator_54 = ttg.memdesc_index %accumulator[%accumulator_51] : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
      ttng.barrier_expect %accumulator_54, 8192, %accumulator_27 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
      %a_55 = ttg.memdesc_index %a_6[%accumulator_51] : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
      ttng.async_tma_copy_global_to_local %a_desc_1[%a, %a_53] %a_55, %accumulator_54, %accumulator_27 : !tt.tensordesc<tensor<128x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> -> !ttg.memdesc<128x64xf8E5M2, #shared, #smem, mutable, 3x128x64> loc(#loc35)
      %accumulator_56 = ttg.memdesc_index %accumulator_11[%accumulator_48] : !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> -> !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
      ttng.barrier_expect %accumulator_56, 4096, %accumulator_27 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
      %b_57 = ttg.memdesc_index %b_7[%accumulator_48] : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
      ttng.async_tma_copy_global_to_local %b_desc_3[%a_53, %b] %b_57, %accumulator_56, %accumulator_27 : !tt.tensordesc<tensor<64x64xf8E5M2, #shared>>, !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> -> !ttg.memdesc<64x64xf8E5M2, #shared, #smem, mutable, 2x64x64> loc(#loc36)
      scf.yield %accumulator_45#0, %accumulator_51, %accumulator_35, %accumulator_37, %accumulator_48, %accumulator_30, %accumulator_32 : tensor<128x64xf32, #mma>, i32, i32, i32, i32, i32, i32 loc(#loc37)
    } loc(#loc37)
    ttng.inval_barrier %accumulator_12 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    ttng.inval_barrier %accumulator_13 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 2x1> loc(#loc37)
    ttg.local_dealloc %accumulator_11 : !ttg.memdesc<2x1xi64, #shared2, #smem, mutable> loc(#loc37)
    ttng.inval_barrier %accumulator_8 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttng.inval_barrier %accumulator_9 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttng.inval_barrier %accumulator_10 : !ttg.memdesc<1xi64, #shared2, #smem, mutable, 3x1> loc(#loc37)
    ttg.local_dealloc %accumulator : !ttg.memdesc<3x1xi64, #shared2, #smem, mutable> loc(#loc37)
    ttg.local_dealloc %b_7 : !ttg.memdesc<2x64x64xf8E5M2, #shared, #smem, mutable> loc(#loc37)
    ttg.local_dealloc %a_6 : !ttg.memdesc<3x128x64xf8E5M2, #shared, #smem, mutable> loc(#loc37)
    %accumulator_21 = arith.truncf %accumulator_20#0 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc40)
    %2 = ttg.local_alloc %accumulator_21 : (tensor<128x64xf16, #mma>) -> !ttg.memdesc<128x64xf16, #shared1, #smem> loc(#loc18)
    ttng.fence_async_shared {bCluster = false} loc(#loc18)
    ttng.async_tma_copy_local_to_global %c_desc_5[%a, %b] %2 : !tt.tensordesc<tensor<128x64xf16, #shared1>>, !ttg.memdesc<128x64xf16, #shared1, #smem> loc(#loc18)
    ttng.async_tma_store_wait {pendings = 0 : i32} loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":17:26)
#loc3 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":18:26)
#loc4 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":21:8)
#loc5 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":27:8)
#loc6 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":33:8)
#loc7 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":41:22)
#loc8 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":40:30)
#loc9 = loc("/home/ubuntu/anaconda3/envs/triton/lib/python3.12/site-packages/triton/language/standard.py":41:28)
#loc10 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":41:33)
#loc11 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":42:51)
#loc12 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":41:24)
#loc13 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":42:24)
#loc14 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":40:19)
#loc15 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":43:32)
#loc16 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":41:51)
#loc17 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":45:33)
#loc18 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":46:63)
#loc19 = loc("/home/ubuntu/triton-runner/examples/native_kernel/matmul/matmul-with-tma-v4.py":46:4)
#loc26 = loc("pid_m"(#loc2))
#loc27 = loc("pid_k"(#loc3))
#loc28 = loc("a_desc"(#loc4))
#loc29 = loc("b_desc"(#loc5))
#loc30 = loc("c_desc"(#loc6))
#loc31 = loc(callsite(#loc7 at #loc8))
#loc32 = loc(callsite(#loc9 at #loc8))
#loc33 = loc("a"(#loc10))
#loc34 = loc("b"(#loc11))
#loc35 = loc("a"(#loc12))
#loc36 = loc("b"(#loc13))
#loc37 = loc("accumulator"(#loc14))
#loc38 = loc("accumulator"(#loc15))
#loc39 = loc("a"(#loc16))
#loc40 = loc("accumulator"(#loc17))
